[{"content":"はじめに 当サイトで新しいテーマを採用しました。\n時間が経つときれいに忘れ去るため、修正した内容を自分用にメモしておこうと思います。\n正しい内容かどうか定かではないため、ご覧になる方はご注意ください。\n採用したテーマ \u0026#x1f517; Stack | Hugo Themes\n\u0026#x1f517; CaiJimmy/hugo-theme-stack: Card-style Hugo theme designed for bloggers\n追記 2024-09-06 初期設定で行った内容を書き終わったタイミングで、同じ趣旨の内容を書かれているサイトを発見。\nめっちゃ真似したみたいになってしまった。ごめんなさい・・・。\n\u0026#x1f517; Hugo Stackテーマのカスタマイズ\n↑ まずはこちらのサイトをご覧いただくほうがよろしいかと。\n良いもの見付けた！\nと思って、コードブロックにファイル名を表示させる方法、参考にさせていただきました 🙇‍♂️\nカスタマイズの基本 テーマフォルダー内でファイルの変更を行うと、テーマの更新があったときに上書きされてしまうため、変更したいファイルを専用の場所にコピーして編集します。\nHugoが動作するとき、テーマフォルダーの中身を読み込んで表示をしてくれますが、専用の場所に置いたファイルが優先される仕様になっています。\nサイト全体の基本設定 ルートフォルダーにある config.yaml を触ります。\nテーマフォルダーのルートや、exampleSiteにあるものを持ってきて修正するのが楽です。\n今回はexampleSiteにある hugo.yaml を使いました。\nファイル名は「config」じゃなくて「hugo」でも良いみたいですね。\n尚、ファイル形式は、yaml、toml、jsonが使えるため、お好みのもので。\nレイアウトやスタイルの設定 /assets ← スタイルシートの保存先\n/layouts ← レイアウト用ファイルの保存先\nこちらもテーマフォルダーから変更したいものを持ってきて修正します。\n全体設定 config.yaml 全部書くと大変なので、引っかかりやすいものとか。\nここに未掲載のもので重要なのは、サイトのURLとか言語設定とか。\nGoogle Analytics Analyticsのコードを貼り付けます。\nconfig.yaml services: # GA Tracking ID googleAnalytics: id: hoge-ID # 自身のタグ Google Analytics 後日変更 Googleタグマネージャーを使っているのでそちらのIDを貼り付けていたんですが、動作しているのかしていないのか微妙な感じ。\nGoogleタグマネージャーのプレビュー画面でも黄色マーク（要注意）が出ているので、ここを使うのはやめました。\nそもそもAnalytics用のIDっぽいしね。\nconfig.yamlは空にして、/layouts/partials/head/custom.htmlと/layouts/_default/baseof.htmlにタグマネージャーで指示されたものを貼り付けました。\nconfig.yaml services: # GA Tracking ID googleAnalytics: id: # 空にしました /layouts/partials/head/custom.html \u0026lt;!-- Google Tag Manager --\u0026gt; \u0026lt;script\u0026gt;(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({\u0026#39;gtm.start\u0026#39;: new Date().getTime(),event:\u0026#39;gtm.js\u0026#39;});var f=d.getElementsByTagName(s)[0], j=d.createElement(s),dl=l!=\u0026#39;dataLayer\u0026#39;?\u0026#39;\u0026amp;l=\u0026#39;+l:\u0026#39;\u0026#39;;j.async=true;j.src= \u0026#39;https://www.googletagmanager.com/gtm.js?id=\u0026#39;+i+dl;f.parentNode.insertBefore(j,f); })(window,document,\u0026#39;script\u0026#39;,\u0026#39;dataLayer\u0026#39;,\u0026#39;hoge-ID\u0026#39;);\u0026lt;/script\u0026gt; \u0026lt;!-- hoge-IDは自分のもので --\u0026gt; \u0026lt;!-- End Google Tag Manager --\u0026gt; /layouts/_default/baseof.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;{{ .Site.LanguageCode }}\u0026#34; dir=\u0026#34;{{ default `ltr` .Language.LanguageDirection }}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; {{- partial \u0026#34;head/head.html\u0026#34; . -}} {{- block \u0026#34;head\u0026#34; . -}}{{ end }} \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;{{ block `body-class` . }}{{ end }}\u0026#34;\u0026gt; \u0026lt;!-- Google Tag Manager (noscript) --\u0026gt; \u0026lt;noscript\u0026gt;\u0026lt;iframe src=\u0026#34;https://www.googletagmanager.com/ns.html?id=hoge-ID\u0026#34; height=\u0026#34;0\u0026#34; width=\u0026#34;0\u0026#34; style=\u0026#34;display:none;visibility:hidden\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;\u0026lt;/noscript\u0026gt; \u0026lt;!-- hoge-IDは自分のもので --\u0026gt; \u0026lt;!-- End Google Tag Manager (noscript) --\u0026gt; {{- partial \u0026#34;head/colorScheme\u0026#34; . -}} パーマリンク 初期値のままですが、あとで変えるかも。\nconfig.yaml permalinks: post: /p/:slug/ # 投稿した記事のURL（/p/タイトル） page: /:slug/ # ページ（Aboutとか）のURL ページタイトル languages: セクションの中には、英語、中国語、アラビア語？があり、訪問者が切り替えできるようになっていました。\nこのサイトは日本人向けなので、元の言語はすべて削除して、日本語を追加しています。\nconfig.yaml languages: # 切り替えないのでセクション不要と思いつつ残している。 ja: languageName: 日本語 title: k-kaz が Hugo で遊ぶサイト # これだけあれば問題ないはず。 weight: 1 # 複数言語を用意したときに有効。 params: description: 1ページに表示する記事数を設定 元々1行で paginate: 3 となっていました。\n動作はしますが最新のHugoでは非推奨のようで、Warningが出ていました。\n下記のように変更しています。\nconfig.yaml pagination: disableAliases: false pagerSize: 3 # 3つ表示させる path: page 日付のスタイル Params: の中で設定。\nconfig.yaml Params: dateFormat: published: 2006/01/02 # 投稿日、年月日がわかりやすいので。 lastUpdated: 2006/01/02/15:04 JST # 更新日、同上。 コメント機能 Params: の中で設定。\n機能が用意されているので楽ちんです。\n私はgiscusを利用しました。 \u0026gt; \u0026#x1f517; Hugoにコメント機能を付ける（giscus編）\nconfig.yaml params: comments: enabled: true // コメント機能を有効に provider: giscus // どのコメント機能を使うか選択 giscus: // providerで選択する機能名 repo: hoge/hoge-repo // ユーザー名と保管用リポジトリ名 repoID: hoge-repo-ID // 自動発行されるリポジトリのID category: General // Discussions内でどのカテゴリに保管するか categoryID: hoge-cat-ID // カテゴリのID mapping: title // 保管時の表題となるもの（タイトル、URL等） lightTheme: preferred_color_scheme // ライトモードのときのテーマカラー（ここではモードで自動調整？） darkTheme: preferred_color_scheme // ダークモードのときのテーマカラー（ここではモードで自動調整？） lang: ja // 項目がなかったので自分で追加し、メッセージ等を日本語に reactionsEnabled: 1 emitMetadata: 0 ウィジェット（ページ） 検索とかアーカイブとかの機能です。\nオリジナル 複写先 /themes/stack/exampleSite/content/page /content/page config.yaml の中で設定がありますが、そこで有効にしてもページがないと画面に出てきません。\n/themes/stack/exampleSite/content/page 内にあるものを、/content/pageへコピーすることで画面に表示できます。\n最初、機能を有効にしても出ない理由が不明で途方に暮れました。\nスタイルシート スタイルシートは各ファイルを持ってくるのではなく、カスタム用のファイルにまとめて記述するようです。\n1ファイルにまとまっているとあとで直したところを確認したくなったときに楽ですね。\nオリジナル 複写先 /themes/stack/assets/scss/custom.scss /assets/scss/custom.scss custom.scssにはこのコメントのみ記述されていました。\ncustom.scss /* Place your custom SCSS in HUGO_SITE_FOLDER/assets/scss/custom.scss */ スタイルシートの修正後、Hugo Serverを再起動しないと反映されないことがあるので注意です。\nページの再読み込みでいけるものもありますが、違いがよくわかっておらず。\nこれでちょっとハマったので、意図した通りに変更されない場合は再起動を試してみましょう。\nフォントを変える 中国製のためか、フォントに違和感があるので変えました。\n/themes/stack/assets/scss/variables.scss の該当部分をcustom.scssにコピペして編集します。\n4行目にある --base-font-family の行を変更しています。\n/assets/scss/custom.scss :root { --sys-font-family: -apple-system, BlinkMacSystemFont, \u0026#34;Segoe UI\u0026#34;, \u0026#34;Droid Sans\u0026#34;, \u0026#34;Helvetica Neue\u0026#34;; --zh-font-family: \u0026#34;PingFang SC\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Droid Sans Fallback\u0026#34;, \u0026#34;Microsoft YaHei\u0026#34;; --base-font-family: -apple-system,BlinkMacSystemFont,segoe ui,Roboto,Oxygen,Ubuntu,Cantarell,open sans,helvetica neue,sans-serif, var(--sys-font-family), var(--zh-font-family), sans-serif; --code-font-family: Menlo, Monaco, Consolas, \u0026#34;Courier New\u0026#34;, var(--zh-font-family), monospace; } レイアウト 未着手。\n不具合修正 resources.ToCSS はもう古い Hugo Serverを起動すると下記のWarningが出ます。\nWARN deprecated: resources.ToCSS was deprecated in Hugo v0.128.0 and will be removed in a future release. Use css.Sass instead.\nresources.ToCSS じゃなくて、 css.Sass を使えと言っています。\nSassをCSSにするための機能らしい。\nToCSS | Hugo ← 古い css.Sass | Hugo ← 新しい フォルダー内を検索して2つのファイル style.html、disqusjs.html で該当箇所を発見しましたので修正。\nstyle.html オリジナル 複写先 /themes/stack/layouts/partials/head/style.html /layouts/partials/head /themes/stack/layouts/partials/head/style.html 1 2 3 {{ $sass := resources.Get \u0026#34;scss/style.scss\u0026#34; }} {{ $style := $sass | resources.ToCSS | minify | resources.Fingerprint \u0026#34;sha256\u0026#34; }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ $style.RelPermalink }}\u0026#34;\u0026gt; 2行目の resources.ToCSS を css.Sass に修正しました。\n/layouts/partials/head/style.html 1 2 3 {{ $sass := resources.Get \u0026#34;scss/style.scss\u0026#34; }} {{ $style := $sass | css.Sass | minify | resources.Fingerprint \u0026#34;sha256\u0026#34; }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ $style.RelPermalink }}\u0026#34;\u0026gt; disqusjs.html オリジナル 複写先 /themes/stack/layouts/partials/comments/provider/disqusjs.html /layouts/partials/comments/provider /themes/stack/layouts/partials/comments/provider/disqusjs.html 1 2 3 4 5 {{- $pc := .Site.Config.Privacy.Disqus -}} {{- $disqusjs := .Site.Params.Comments.disqusjs -}} {{- if and (not $pc.Disable) (and $disqusjs.Shortname $disqusjs.ApiKey) -}} {{- $style := resources.Get \u0026#34;scss/partials/comments/disqusjs.scss\u0026#34; | resources.ToCSS | minify -}} 5行目の resources.ToCSS を css.Sass に修正しました。\n/layouts/partials/comments/provider/disqusjs.html 1 2 3 4 5 {{- $pc := .Site.Config.Privacy.Disqus -}} {{- $disqusjs := .Site.Params.Comments.disqusjs -}} {{- if and (not $pc.Disable) (and $disqusjs.Shortname $disqusjs.ApiKey) -}} {{- $style := resources.Get \u0026#34;scss/partials/comments/disqusjs.scss\u0026#34; | css.Scss | minify -}} paginate はもう古い Hugo Serverを起動すると下記のWarningが出ます。\nWARN deprecated: site config key paginate was deprecated in Hugo v0.128.0 and will be removed in a future release. Use pagination.pagerSize instead.\n1画面に表示する記事の数を指定する機能です。\npaginate は古いので pagination.pagerSize に変えなさいというものです。\nconfig.yamal の中で設定します。\n元は paginate: 3 の1行ですが、下記のようにします。\nconfig.yaml pagination: disableAliases: false pagerSize: 3 path: page ","date":"2024-09-05T12:48:18+09:00","image":"https://k-kaz-git.github.io/images/hugo-theme-stack.avif","permalink":"https://k-kaz-git.github.io/p/hugo%E3%81%AE%E3%83%86%E3%83%BC%E3%83%9E-stack-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","title":"Hugoのテーマ Stack について"},{"content":"WARN deprecated hugo serverを実行すると、\n「WARN deprecated: .Site.Social was deprecated in Hugo v0.124.0 and will be removed in a future release. Use .Site.Params instead.」\nというメッセージが出ていることに気付きました。\nとくに問題が出て困っているわけでもありませんが、気持ち悪いので直しましょう。\n意味 「WARN deprecated: .Site.Social was deprecated in Hugo v0.124.0 and will be removed in a future release. Use .Site.Params instead.」\n「.Site.Socialは、v0.124.0で非推奨となり、そのうち抹消される運命です。.Site.Paramsを使いましょう」という感じでしょうか。\n現在 v0.131.0 を使っているので、今頃気付くなよって感じです。\n探す 当サイトのデータが入っているフォルダーに対して検索を実行しました。\n結果、ありませんでした。\nえ～と思いながらも、検索文字列を若干変えつつ、該当箇所を発見しました。\n.Site.Social でダメでしたが、site.socialで見付けました。\nヒットしたファイル themes\\PaperMod\\layouts\\partials\\templates\\opengraph.html themes\\PaperMod\\layouts\\partials\\templates\\twitter_cards.html 当サイトで利用していないと思われるファイルですが、直さないとWARNINGが出続けたままです。\n更新の多いテーマでしたらその中で修正が入るんでしょうけど、PagerModは安定しきっている（と好意的に捉える）ので、昨年2月から更新がありません。\n公式の修正を待つよりも、自分でやるべきでしょう。\n修正 その前に テーマ内のファイルを修正した場合、テーマの更新があると上書きされて戻っちゃう可能性があります。\nそのため、修正前にこの2つのファイルを下記へ複製します。\nlayouts\\partials\\templates\n同じファイルが存在することになりますが、こちらのフォルダーが優先されるのでオッケーなのです。\nopengraph.html 最後の行を修正します。\n{{- with site.Social.facebook_admin }}\u0026lt;meta property=\u0026quot;fb:admins\u0026quot; content=\u0026quot;{{ . }}\u0026quot; /\u0026gt;{{ end }}\n↓ こうします。\n{{- with site.Params.facebook_admin }}\u0026lt;meta property=\u0026quot;fb:admins\u0026quot; content=\u0026quot;{{ . }}\u0026quot; /\u0026gt;{{ end }}\ntwitter_cards.html 最後から3番目の行を修正します。\n{{ with site.Social.twitter -}}\n↓ こうします。\n{{ with site.Params.twitter -}}\n結果 WARNINGは出なくなりました。\n正しい修正なのかは分かりません。\n一応、hugo server でWARNINGが出ないこと、無事にサーバーが起動してサイトの表示がされることまでは確認しました。\n参考にされる場合は自己責任でお願いします。\nダメだったら複製したファイルを消すことで戻せます。\n","date":"2024-08-07T08:44:45+09:00","image":"https://k-kaz-git.github.io/images/hugo-warning-sitesocial.webp","permalink":"https://k-kaz-git.github.io/p/hugo-warning-.site.social/","title":"Hugo Warning .Site.Social"},{"content":"前提 テーマはPagerModです。\n\u0026#x1f517; adityatelange/hugo-PaperMod: A fast, clean, responsive Hugo theme.\nDiscussionsを見て PagerModのDiscussionsを見たら、リスト表示（list.html）にタグを入れたいという投稿がありました。\nシングル記事（single.html）の本文下には元から入っているんですが、それをリストにも出したいと。\n\u0026#x1f517; How to display tags in the post list? · adityatelange/hugo-PaperMod · Discussion #606\n投稿自体は2021年と古かったのですが、最近になって解決したようでトップに上がっていました。\n完成形 実際に行ったサイトはこちら。\n\u0026#x1f517; k-kaz が好きなことを書く\nシングル表示のほうはそれぞれのタグにリンクが付いていて、同タグ一覧を開くことが可能です。\nやり方 スレッドに書いてあるとおりなんですけど、\n設定されたタグを抜き出す部品（tags.html）を用意する {{- $tags := .Params.tags -}} {{- if $tags -}} {{- $lastIndex := sub (len $tags) 1 -}} {{- range $index, $tag := $tags -}} \u0026lt;a href=\u0026#34;/blog2/tags/{{ $tag | urlize }}\u0026#34;\u0026gt; {{ $tag }}\u0026lt;/a\u0026gt; {{- if ne $index $lastIndex }} · {{ end -}} {{- end -}} {{- end -}} ファイル名はなんでもオッケー。\nurlize でURLを作成します。\n/blog2/ はうちのサイト用に入れています。\n表示するための部品（post_meta_cattag.html）を用意する {{- $scratch := newScratch }} {{- with (partial \u0026#34;tags.html\u0026#34; .) }} {{- $scratch.Add \u0026#34;meta\u0026#34; (slice \u0026#34; / ［\u0026#34; . \u0026#34;］\u0026#34;)}} {{- end}} {{- with ($scratch.Get \u0026#34;meta\u0026#34;) }} {{- delimit . \u0026#34; \u0026#34; | safeHTML -}} {{- end -}} こちらのファイル名もなんでもオッケー。\n中ではさきほど作成したファイル名 tags.html を利用しています。\nリスト表示（list.html）の画面に表示する {{- if not (.Param \u0026#34;hideMeta\u0026#34;) }} \u0026lt;footer class=\u0026#34;entry-footer\u0026#34;\u0026gt; {{- partial \u0026#34;post_meta.html\u0026#34; . -}} {{- partial \u0026#34;post_meta_cattag.html\u0026#34; . -}} \u0026lt;/footer\u0026gt; {{- end }} 一部分だけ抜き出しましたが、{{- partial \u0026quot;post_meta_cattag.html\u0026quot; . -}} を追加します。\nおまけでシングル表示（single.html）の上部にも表示する \u0026lt;div class=\u0026#34;post-meta\u0026#34;\u0026gt; {{- partial \u0026#34;post_meta.html\u0026#34; . -}} {{- partial \u0026#34;post_meta_cattag.html\u0026#34; . -}} {{- partial \u0026#34;translation_list.html\u0026#34; . -}} {{- partial \u0026#34;edit_post.html\u0026#34; . -}} {{- partial \u0026#34;post_canonical.html\u0026#34; . -}} \u0026lt;/div\u0026gt; こちらも一部分だけ抜き出し。\n{{- partial \u0026quot;post_meta_cattag.html\u0026quot; . -}} を追加します。\n","date":"2024-06-10T21:05:42+09:00","image":"https://k-kaz-git.github.io/images/tag_720.webp","permalink":"https://k-kaz-git.github.io/p/%E3%83%AA%E3%82%B9%E3%83%88%E8%A1%A8%E7%A4%BA%E3%81%A8%E3%82%B7%E3%83%B3%E3%82%B0%E3%83%AB%E8%A1%A8%E7%A4%BA%E3%81%AB%E3%82%BF%E3%82%B0%E3%82%92%E4%BB%98%E3%81%91%E3%82%8B/","title":"リスト表示とシングル表示にタグを付ける"},{"content":"utterancesからgiscusへ 以前、コメント欄を付けるぞとこんな記事を書きました。\nHugoにコメント機能を付ける\nその際、GitHubのIssuesにコメントを保管する utterances という機能を利用しました。\n今回、その utterances から着想を得たという giscus を利用してみることにしました。\n1年間で1件もコメントが来ていないのに変更するという・・・。\ngiscusって？ utterances とよく似ています。\ngiscusは、GitHubのDiscussions機能を使います。\nということは、こちらもコメント投稿時にGitHubアカウントが必要となります。\ngiscus 設定手順 GitHub アカウント取得とリポジトリ作成 GitHubアカウントの取得 コメント格納用リポジトリを作成 これらは前回とまったく同じなので、下記参照ください。\nGitHubアカウントの取得｜Hugoにコメント機能を付ける\nコメント格納用リポジトリを作成｜Hugoにコメント機能を付ける\n補足 リポジトリの方は、公開設定（Public）にしておくことをお忘れなく。 utterances 等ですでにリポジトリを作ってあれば流用可能です。 Issuesに入っているコメントをDiscussionsへ移行する方法もあります。\nModerating discussions - GitHub Docs 設置するサイトが複数ある場合は、リポジトリも同じ数だけ用意します。 Discussionsを有効にする コメント格納用リポジトリで、Discussionsの機能を有効にします。\nSettingsへ移動 General内のFeaturesにあるDiscussionsを有効 giscusアプリ リポジトリ毎にインストールする必要がありますので、複数設置する場合はご注意を。\nインストール GitHub Apps - giscus へ移動 インストール インストール先は今回のリポジトリを選択 設定（コード取得） giscus へ移動 自分好みに設定 出来上がったコードを控える Hugo（テーマ） PaperMod の場合 コメント機能を表示したい場所へ先程のコードを挿入 私の場合は、記事の下に入れるため single.html の最後に入れました。\n// single.html {{- if (.Param \u0026#34;comments\u0026#34;) }} \u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;hoge/hoge-repo\u0026#34; //ユーザー名と保管用リポジトリ名 data-repo-id=\u0026#34;hoge-ID\u0026#34; //自動発行されるID data-category=\u0026#34;Announcements\u0026#34; //Discussions内でどのカテゴリに保管するか data-category-id=\u0026#34;hoge-ID\u0026#34; //カテゴリのID data-mapping=\u0026#34;title\u0026#34; //保管時、表題となるもの（タイトル、URL等） data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;bottom\u0026#34; data-theme=\u0026#34;preferred_color_scheme\u0026#34; //テーマカラー data-lang=\u0026#34;ja\u0026#34; //日本語 data-loading=\u0026#34;lazy\u0026#34; //遅延読み込み機能有効 crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; {{- end }} コメントで説明を入れてみましたが、違っていたらすいません。\n先ほど取得したコードをそのまま使っています。\n修正など不要で利用できています。ありがたや。\nStack の場合 コメント機能は標準で付いているので、configを触るだけで大丈夫でした。\n// config.yml params: comments: enabled: true // コメント機能を有効に provider: giscus // どのコメント機能を使うか選択 giscus: // providerで選択する機能名 repo: hoge/hoge-repo // ユーザー名と保管用リポジトリ名 repoID: hoge-repo-ID // 自動発行されるリポジトリのID category: General // Discussions内でどのカテゴリに保管するか categoryID: hoge-cat-ID // カテゴリのID mapping: title // 保管時の表題となるもの（タイトル、URL等） lightTheme: preferred_color_scheme // ライトモードのときのテーマカラー（ここではモードで自動調整？） darkTheme: preferred_color_scheme // ダークモードのときのテーマカラー（ここではモードで自動調整？） lang: ja // 項目がなかったので自分で追加し、メッセージ等を日本語に reactionsEnabled: 1 emitMetadata: 0 所感 難しいことは何もなく、簡単にコメント機能の設置ができました。\n今回設置したのは下記サイトになります。\nPagerMod k-kaz が好きなことを書く Stack k-kaz が Hugo で遊ぶサイト ","date":"2024-02-20T08:43:46+09:00","image":"https://k-kaz-git.github.io/images/speech-bubbles_640.webp","permalink":"https://k-kaz-git.github.io/p/hugo%E3%81%AB%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E6%A9%9F%E8%83%BD%E3%82%92%E4%BB%98%E3%81%91%E3%82%8Bgiscus%E7%B7%A8/","title":"Hugoにコメント機能を付ける（giscus編）"},{"content":"Hugo v0.122.0 1年振りくらいにHugo本体のアップデートを実施しました。\nアップデート後、特別な問題は出ていないように思っていましたが、しばらくしておかしなところに気付きました。\ngohugoio/hugo: The world’s fastest framework for building websites.\n記事の更新日とかがおかしい Pagermod というテーマを使っています。\nadityatelange/hugo-PaperMod: A fast, clean, responsive Hugo theme.\n記事タイトルの下に更新日、読むのにかかる時間等を入れていますが、ここで使っていたHTMLタグ span や、スペースを表示する \u0026amp;nbsp; なんかがそのままページに表示されていました。\nたぶん、この1年間の間に記述方法が変わったのでしょう。修正しました。\npost_meta.html \u0026lt;!-- 元々の内容 --\u0026gt; {{- if not .Date.IsZero -}} {{- $scratch.Add \u0026#34;meta\u0026#34; (slice (printf \u0026#34;\u0026lt;span title=\u0026#39;%s\u0026#39;\u0026gt;Posted %s / Updated %s\u0026lt;/span\u0026gt;\u0026#34; (.Date) (.Date | time.Format (default \u0026#34;2006-01-02\u0026#34; site.Params.DateFormat)) (.Lastmod.Format (default \u0026#34;2006-01-02\u0026#34;)))) }} {{- end }} {{- with ($scratch.Get \u0026#34;meta\u0026#34;) }} {{- delimit . \u0026#34;\u0026amp;nbsp;·\u0026amp;nbsp;\u0026#34; -}} {{- end -}} \u0026lt;!-- 修正後の内容 --\u0026gt; {{- if not .Date.IsZero -}} {{- $scratch.Add \u0026#34;meta\u0026#34; (slice (printf \u0026#34;Posted %s / Last %s\u0026#34; (.Date | time.Format (default \u0026#34;2006-01-02\u0026#34;)) (.Lastmod.Format (default \u0026#34;2006-01-02\u0026#34;)))) }} {{- end }} {{- with ($scratch.Get \u0026#34;meta\u0026#34;) }} {{- delimit . \u0026#34; \u0026#34; -}} {{- end -}} これで大丈夫そうです。\n","date":"2024-02-09T21:22:29+09:00","image":"https://k-kaz-git.github.io/images/hugo-logo-wide.svg","permalink":"https://k-kaz-git.github.io/p/hugo-update-v0.122.0/","title":"Hugo Update V0.122.0"},{"content":"さくらとHugo ネット上に全然情報が無くて途方に暮れていたとき、神様に出会いました。\nさくらレンタルサーバーでも自動デプロイがしたい！【GitHubActions】\nあなたのおかげで救われました。\n本当にありがとうございます。\n手順 Hugo でコンテンツ作成 GitHub へ Push GitHub Actions にて FTP-Deploy-Action を実行 ※さくらサーバーへアップロード この3番目がポイントですね。\nGitHub Actions を利用することで、さくらサーバーにFTP経由でデータをアップロードしてくれます。\n詳細は上記神様サイトをご覧ください。\nGitHub Actions について - GitHub Docs\n実は・・・ 10ヶ月ほど前に実現していて、ブログのほうには書いていたんですけど、こちらに書くのを忘れていました・・・。\n噂のブログ → 天才現る\n","date":"2023-10-27T12:44:27+09:00","image":"https://k-kaz-git.github.io/images/hugo-sakura.webp","permalink":"https://k-kaz-git.github.io/p/%E3%81%95%E3%81%8F%E3%82%89%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%8D%E3%83%83%E3%83%88%E3%81%A7hugo%E3%82%92%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84/","title":"さくらインターネットでHugoを使いたい"},{"content":"共通 使用中のバージョンを確認 hugo version これを実行すると、現在使用しているバージョンが表示されます。\nちなみに先程実行したところ、\nhugo v0.80.0 と出ました。\n最新版のダウンロード Hugoのリリース一覧はこちら。\nReleases · gohugoio/hugo\n1番上に最新版が出ていますので、この中の「Assets」から欲しいものをダウンロードします。\n表示されていない場合は「Show all \u0026hellip;」を選択すると、隠れているものが出てきます。\nWindows編 ダウンロードするファイル 私は拡張版を使っているのでhugo_extended_バージョン_windows-amd64.zipを落とします。\n通常版の場合は、「extended」が付かないものを落としてください。\nハッシュ値比較 「Assets」の中にhugo_0.111.3_checksums.txtというファイルがあり、この中にハッシュ値が記載されています。\nダウンロードしたファイルと、上記ファイル内のハッシュ値が同一か確認しましょう。\n解凍 zipファイルを解凍すると、3つのファイルが出来上がります。\nhugo.exe LICENSE README.md インストール Windowsの場合は、hugo.exeを置き換える（上書き）だけで完了します。\n先程解凍した3つのファイルを既存のhugo.exeを置いてある場所に上書きで入れて終わりです。\n確認1 バージョン hugo version 最新版のバージョンが表示されていればオッケーです。\n確認2 Hugo Sever hugo server これを実行して、エラーが出ないことを確認します。\n何かしらのエラーが出たときはネットで調べて対応します。\n意味不明の場合は、いったん元のバージョンに戻す（古いのを上書き）でも良いです。\nLinux編 また後で書きます。\nトラブルシューティング 参考になれば・・・ 以前、一気にバージョンを上げたときに問題が出て、四苦八苦した記事がこちら。\nそうだ Hugo の最新版を使おう！ · k-kaz が Hugo で遊ぶサイト\n最新版では古い機能が使えなくなっていたので、その対応をしました。\n旧バージョンの入手方法 リリースのページに移動します。\nReleases · gohugoio/hugo\n上部メニュー（Code、Issues \u0026hellip;）のすぐ下で、「Releases」が青くなっていると思います。 その横にある「Tags」を選択してください。\nリリース一覧が簡易表示されます。\n希望するリリースの「Downloads」を選択することでゲットできます。\n","date":"2023-04-17T12:58:50+09:00","image":"https://k-kaz-git.github.io/images/hugo-logo-wide.svg","permalink":"https://k-kaz-git.github.io/p/hugo%E3%81%AE%E6%9C%80%E6%96%B0%E7%89%88%E3%82%92%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86/","title":"Hugoの最新版を入れてみよう"},{"content":"Mermaid記法 テキストだけでフローチャートやガントチャートが描けちゃうという魔法の記法です。\nMarkdownの中に書いてあげればオッケーです。\n公式サイト Mermaid | Diagramming and charting tool\n見本 見ていただいたほうが早いと思うので、ご覧ください。\nこんな感じのフローチャートがテキストだけで表現できます。\n本サイトでは設定を行っていなかったので、見せられなかった（笑）\nこちらで → HugoでMermaid記法 | k-kaz が好きなことを書く\nあとは公式サイトにいろんなパターンが出ています。\nAbout Mermaid | Mermaid\nHugoで使う 残念ながらHugoの純正機能だけで、Mermaid記法には対応しません。\n専用のJavaScriptを読み込むことと、テンプレート等の準備で利用可能となります。\nHugoのドキュメントと利用手順 ここを見ればオッケー → Diagrams | Hugo\nMermaid用のテンプレートを作成します。 サンプルでは layouts/_default/_markup/render-codeblock-mermaid.html 記事を表示させるテンプレート内にコード（※1）を追記します。 layouts/_default/single.html とかで、.Content の呼び出しよりも後に追記します。 記事内でMermaid記法が利用可能になります。 ※1 追記するコード\n{{ if .Page.Store.Get \u0026#34;hasMermaid\u0026#34; }} \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import mermaid from \u0026#39;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs\u0026#39;; mermaid.initialize({ startOnLoad: true }); \u0026lt;/script\u0026gt; {{ end }} 使えるようになりました たったこれだけで使えるようになるんですね。\n拍子抜けするくらい楽でした。\n","date":"2023-04-17T12:55:42+09:00","image":"https://k-kaz-git.github.io/images/mermaid.webp","permalink":"https://k-kaz-git.github.io/p/hugo%E3%81%A7mermaid%E8%A8%98%E6%B3%95%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B/","title":"HugoでMermaid記法を利用する"},{"content":"関連記事を表示する Hugoには関連記事を表示する機能が備わっています。\nこれ → {{ $related := .Site.RegularPages.Related . | first 5 }}\n具体的には、こんな感じで行います。\n関連記事を表示するhtmlを用意する 記事ページの所定位置に埋め込む 重み付けをする 関連記事を表示するhtmlを用意する 関連記事を表示させるためのhtml（ここではrelated.html）を用意します。\nファイルの場所\nlayouts/partials/related.html\n{{ $related := .Site.RegularPages.Related . | first 5 }} {{ with $related }} \u0026lt;h3\u0026gt;See Also\u0026lt;/h3\u0026gt; \u0026lt;ul\u0026gt; {{ range . }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} 1行目が関連記事の機能を使うための魔法。\nたぶん、最初の5つを取得していると思います。\nそれ以下は、実際に表示させるためのhtmlです。\n箇条書き（li）の部分は繰り返し処理になっているので、1行で済んでいます。\nちなみに上のサンプルは、公式サイトから転記です。\nRelated Content | Hugo\n記事ページの所定位置に埋め込む 表示させたい場所にrelated.htmlを呼び出すコードを追記します。\nファイル\nlayouts/default/single.html\n{{- if (.Param \u0026#34;ShowRelated\u0026#34;) }} {{ partial \u0026#34;related.html\u0026#34; . }} {{- end }} 2行目だけで成立しますが、設定ファイル（config.yml）内でShowRelatedがTrueのときに表示するというようにしておきました。\nparams: ShowRelated: true 重み付けをする 設定ファイル（config.yml）内で、関連度の重み付けをします。\nrelated: includeNewer: true threshold: 80 toLower: true indices: - name: keywords weight: 100 - name: tags weight: 70 - name: categories weight: 40 - name: date weight: 10 数字が重みですね。\n詳細は公式サイトをご覧ください。\nConfigure Related Content | Hugo\nサンプル こちらのサイトで関連記事の表示を行っています。\nk-kaz が好きなことを書く\n時間が出来たらここでも行おうかな・・・。\n","date":"2023-03-08T12:54:23+09:00","image":"https://k-kaz-git.github.io/images/hugo-related.webp","permalink":"https://k-kaz-git.github.io/p/hugo%E3%81%A7%E9%96%A2%E9%80%A3%E8%A8%98%E4%BA%8B%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B/","title":"Hugoで関連記事を表示する"},{"content":"設定の同期 以前は、Gitを使って別環境の設定を同期していたんですけど、VSCode自体に同期の機能が付きまして楽ちんになりました。\nファイル → ユーザー設定 → 設定の同期がオン（にチェック）\n※アカウントアイコンや、設定アイコンからでも良いです。\n利用にはGitまたはMicrosoftアカウントが必要です。\nスニペット 定形文を用意して簡単に呼び出す機能です。\nこちらをご覧ください。\n\u0026#x1f517;VSCode のスニペットを使ってみる\nワークスペース 作業毎にフォルダを用意することが多いかと思いますが、そんなときはワークスペースの機能が便利です。\n私はいくつかHugoで作ったサイトがあるので、サイト毎にワークスペース登録して、触りたいサイトをすぐに呼び出せるようにしています。\n作成 「ファイル」 → 「フォルダーを開く」で、該当フォルダーを開く 「ファイル」 → 「名前を付けてワークスペースを保存」で、保存する 呼び出し 「ファイル」 → 「ファイルでワークスペースを開く」\n「ファイル」 → 「最近使用した項目を開く」でもオッケーです。 ターミナル これ、知ってました？\n私、昨日知ったんですけど・・・。\n表示 「表示」 → 「ターミナル」を選択 画面下にターミナルウィンドウが出てきます。\n毎回エクスプローラーから、Power Shell（Windowsの場合ね）を開いて、新しい記事の作成や、Hugoサーバーの起動、デプロイ等をやっていたんですが、VSCの中ですべて出来るんです。\nこれ、私にとってめっちゃ画期的です。\nMarkdown バージョンに依存するものもあります。\nversion 1.73 でけっこう強化されました。\nワークスペース内のファイルが移動したらリンクを修正する【1.73】 markdown.updateLinksOnFileMove.enabled を有効にします。\n重複、未使用のリンクをチェックする【1.73】 markdown.validate を有効にします。\nドラッグ・アンド・ドロップで画像ファイルを追加する【1.73】 Shift キーを押しながらドラッグ・アンド・ドロップすると、Markdown記法で記述されます。\n","date":"2023-02-15T12:43:28+09:00","image":"https://k-kaz-git.github.io/images/vscode.webp","permalink":"https://k-kaz-git.github.io/p/vscode-%E5%B0%8F%E3%83%8D%E3%82%BF/","title":"VSCode 小ネタ"},{"content":"Hugoの絵文字 テーマの設定を変更することで利用できるようになります。（たぶん）\nConfigファイルで設定追加 設定ファイルの config.toml に下記を追加します。\nenableEmoji = \u0026#34;true\u0026#34; これだけです。\nconfig.yml の場合はこちら。\nenableEmoji: true 参考\nConfigure Hugo | Hugo\n使い方 記事に ：smile： という感じのコードを入れるだけです。\n展開しないように全角のコロンで書きましたが、実際は半角で書きますよ。\n半角コロンを使って書くと → \u0026#x1f604;\nチートシート 絵文字コード一覧をありがたく使わせていただきましょう。\n🎁 Emoji cheat sheet for GitHub, Basecamp, Slack \u0026amp; more\n作成いただいた方、ありがとうございます。\n","date":"2023-02-09T08:40:05+09:00","image":"https://k-kaz-git.github.io/images/hugo-emoji.webp","permalink":"https://k-kaz-git.github.io/p/hugo%E3%81%A7%E7%B5%B5%E6%96%87%E5%AD%97%E3%82%92%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/","title":"Hugoで絵文字を使えるようにする"},{"content":"Hugoのコメント機能 Hugoって静的サイトジェネレーターなので、動的なコメント機能って付いていないんですよね。\nでは、どうするかと言いますと、外部サービスを利用します。\nテーマによるかもしれませんが、私がこれまで触ったことのあるテーマは、すべてDisqusに対応していまして、ConfigファイルにDisqusのショートネームをセットすれば完了みたいな感じでした。\nDisqus 利用方法 今回、Disqusを使わなかったので詳細は不明ですが、たぶんこんな感じかと。\nDisqusでアカウントを作成する Configファイルに、ショートネームを記載する 以上。\nなんて簡単なんでしょう。\nアカウントは設置する人だけ取得すれば良いみたいで、コメントを投稿する方たちは必要ないみたい。\n気になったこと 無料アカウントの制限が若干気になりました。\n広告が表示されるらしいのと、表示回数の上限があるということ。\nたっぷり使う方は、有料版の契約をおすすめします。\nutterances utterancesは、GitHub内で動作するアプリ（GitHub App）です。\n無料で広告が無いのと、テーマがシンプルだったのが決め手となり、こちらを採用しました。\n仕組みとしては、GitHubにコメント格納用のスペース（リポジトリ）を用意して、utterances経由で書き込んだり、読み込んで表示させる形です。\n以下、利用方法を記載します。\nGitHubアカウントの取得 GitHubアカウントが無いと何もできませんので、まず取得します。\nとはいえ、Hugoを使っている方でしたら、大体持っていらっしゃるかと思われます。\nアカウントはこちらで作成できます。\nGitHub Japan | GitHub\nコメント格納用リポジトリを作成 右上の「＋」から、「New repository」を選択します。\n名前は適当（ここでは comment ）で良いです。\nあとPublicにしておいてください。\nラベル作成は任意 続いて、作成したリポジトリを開き、「issues」から、「Labels」を選択します。\n適当な名前のラベル（commentとか）を作ります。\nutterancesのインストール utterancesに移動します。\n「configuration」というところからやっていきます。\n1のリポジトリ作成は完了しているので、2から行います。\nutteranc app をクリックしてインストールします。\nインストール先は先程作成したリポジトリです。\n組み込み用コードの作成 続いて3です。\nリポジトリ名設定 repo: と書かれているところに「オーナー名／リポジトリ名」を入れます。\nBlog Post ↔️ Issue Mapping 記事とIssueの接続設定をします。\nお好きなもので結構ですが、私は「Issue title contains page title」にしています。\nページタイトルが、Issueのタイトルになるように。\nIssue Labels リポジトリ作成のときにラベルを作成していたら、ここに入れます。\nオプションなのでなくても大丈夫です。\ntheme utterancのテーマを設定します。\nリストから選択するとテーマに合わせて画面が変わるのでお好みのものをどうぞ。\nちなみに実際のコメントは、もう少し下にスクロールすると出てきます。\nEnable Utterances これがコードになりますので、右下の「Copy」を押して、クリップボードに入れてください。\nHugoへ組み込み コピーしたコードを表示したい場所に入れてもらえればオッケーです。\n私の場合、各記事の下に表示したかったので、こんな感じにしました。\nテンプレート複製 記事表示用のテンプレートを修正しますが、オリジナルはそのまま残しておきたいので複製します。\n※テーマによって変わるかも\n/theme/hoge/layouts/_default/single.html これを\n↓\n/layouts/_default/single.html ここに複製して、これを編集します。\n説明不要かもしれませんが、上のtheme内よりも、下の場所のほうが優先して使われるのです。\nテンプレート編集 ここはお好みです。\n好きな場所にコードを入れてください。\nHugo Server でエラーせずにコメント欄が表示されれば大丈夫です。\nお疲れ様でした。\nコメント欄の表示、非表示 私が使用したテーマは、記事内にコメント欄（Disqus）を表示するかしないか設定できるようになっていました。\n「表示する」とした場合に読み込まれる部分がsingle.htmlにあるので、そこのDisqusを消して、utterancのコードを入れておきました。\nこれで記事ごとに表示、非表示の切り替えができました。\n2023/02/08 追記 コメントを付けたのはこちらのサイト。\nコメント欄を付けてみた | k-kaz が好きなことを書く\n2024/02/20 追記 giscusというコメント機能に変更してみました。\nこちらをご覧ください。\nHugoにコメント機能を付ける（giscus編）\n","date":"2023-02-07T12:49:20+09:00","image":"https://k-kaz-git.github.io/images/speech-bubbles_640.webp","permalink":"https://k-kaz-git.github.io/p/hugo%E3%81%AB%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E6%A9%9F%E8%83%BD%E3%82%92%E4%BB%98%E3%81%91%E3%82%8B/","title":"Hugoにコメント機能を付ける"},{"content":"おことわり こちらのページは、完全に自分向けの備忘録として書いています。\n何かを期待されて訪問された方、ごめんなさい。\nまったく役に立たないかと思われます・・・。\n前提 前提として、\nGithub Pages の環境を構築済み（サイト公開済み） ローカル環境をまっさらにした という感じになります。\nこれを書いているのも、自分のパソコンを新しくしたときに2時間ほどハマったからで、未来の自分に向けてという感じです。\n環境構築の簡単な流れ 基本編 Github に Hugo で作ったデータを入れる手順はこんな感じ。\nローカル Hugo をインストールする テーマを決めて所定の場所に置く 設定ファイル config.toml を適宜修正する 記事を書く Github 空のリポジトリ（全）を作る ローカル 空のリポジトリ（全）にプッシュする Github Pages 編 Github 空のリポジトリ（公開用）を作る ※Github Pages 用 リポジトリの設定画面から、page の設定をする ソースの場所を選んだりします。 ローカル public フォルダをサブモジュール化する git submodule add git@github.com:ユーザー名/空のリポジトリ（公開用）.git public\nたぶん、public は空にしておかないとダメ。\n空にする場合は git rm -r public で。 いつも通りプッシュする ちょっと解説 ファイル関係 Hugo で作成する記事は、基本的に content/post の中に、Markdown 形式で保存していきます。\nhugo というコマンドを実行すると public の中に、html などサイト公開用のファイル群が生成されます。\nGithub Pages で使うのは public の中にあるファイルで、それ以外のファイルは不要です。\n連携 生成されたファイル群を毎回手作業で公開用リポジトリにコピーするのは面倒です。\nそこで、サブモジュール化という手段をとっています。\ngit submodule add git@github.com:ユーザー名/空のリポジトリ（公開用）.git public\nこれをすることで、自動的に public の中身が、公開用リポジトリに入っていきます。\nなんて便利なんだ。\nローカル環境をまっさらにしたとき ローカル リポジトリ（全）を持ってくる Git clone サブモジュール化をする git submodule add git@github.com:ユーザー名/空のリポジトリ（公開用）.git public 以上。\n少し悩んだ リポジトリ（全）がそのまま公開されると勘違いして、プッシュしてデータも更新されたのに、なんでサイトの表示が更新されないのか悩んでいました。\nGithub Pages 用にリポジトリが分かれていたのをすっかり忘れていたのです。\nあとで気付いたんですが、どうやってそちらのリポジトリにデータを送っていたのか忘れていて、四苦八苦しました。\nこれはサブモジュールを使っていたんですね。\nまぁ、4年ほど前の環境ですし、環境って1回作ったらなかなか触ることもないので、忘れるのも仕方ないですね。年齢的なアレもあるし。\nそんなときにここの記事を思い出せれば良しということで。\n","date":"2023-01-30T12:43:46+09:00","image":"https://k-kaz-git.github.io/images/k-kaz-black-w.svg","permalink":"https://k-kaz-git.github.io/p/github-pages-%E7%92%B0%E5%A2%83%E3%81%AE%E5%BE%A9%E6%97%A7%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB/","title":"Github Pages 環境の復旧（ローカル）"},{"content":"こんなに便利な物だったとは！ SVGって、昔からある画像形式なんで、存在はもちろん知っていたんですけど、使うことは無かったんですよね。\n写真系ならJPEG使うし、透過させるならPNG使うし。\nここ数年だと、より高圧縮なWebP（相手が対応していれば）を使ったりしています。\nちょっと前に、k-kaz が好きなことを書くサイトで、Hugoのロゴ画像を使う機会がありました。\n勝手にページの読み込み速度に拘っているので、画像サイズを適切なものにしようと思ったんです。\nそのとき、公式ロゴがsvg形式だったことを知り、なんでsvgなんだろうと思ったわけです。\n調べて驚いた！ SVGとは「Scalable Vector Graphics」の略で、「大きさを変えられるベクター画像」ということらしい。\nなんてこった！\nHTMLの中でサイズ指定すれば、勝手にその大きさに画像を変えてくれるなんて、夢見たいじゃない。\nしかもベクター画像だから、拡大してぼやけるとか、縮小して潰れるみたいなことがなく、美しいままなのよ。\n興奮して、ちょっとオネエになった。\nJPEGやPNGのラスター画像だと、同じ画像でも、必要に応じて複数のサイズを用意することがあります。\nそれこそ、パソコン用だ、モバイル用だという、レスポンシブ対応です。\n私は自由だ！ ということで、今後は積極的にSVGを活用していこうと思います。\n写真系は弱いようなので、こちらはWebP（またはJPEG)で。\n画像形式なんだけど、テキスト形式のファイル ちょっと補足。\nSVGのファイルは、画像形式でありながらも、メモ帳とかで開けるテキストファイルです。\n座標とか、色とかが文字列で表されているので、メモ帳とかでファイルを開いて、色を書き換えたりできます。\n色を変えるだけなら、専用のアプリを使う必要がありません。楽ちん。\n","date":"2021-11-23T19:07:07+09:00","image":"https://k-kaz-git.github.io/images/k-kaz-black-w.svg","permalink":"https://k-kaz-git.github.io/p/svg%E3%81%9D%E3%82%8C%E3%81%AF%E9%AD%94%E6%B3%95%E3%81%AE%E7%94%BB%E5%83%8F%E5%BD%A2%E5%BC%8F/","title":"SVG、それは魔法の画像形式"},{"content":"コンテンツが表示されないぞ。 Hugo では、記事を置く場所が content の中となっています。\nさらにその下の階層でサブディレクトリを作って、カテゴリ毎に記事を管理することも可能です。\nk-kaz が好きなことを書くサイト の場合。 元々は、content 直下の2ファイルと、post というサブディレクトリで運用していました。\ncontent │ archives.md │ links.md │ └─post │ _index.md │ ├─2020-10-25 │ index.md │ └─2020-10-25-02 coffee-5498486_300.webp coffee-5498486_720.webp index.md この場合、トップページにリスト表示されるのは post 内の記事のみ。\narchives.md links.md は上部メニューに割り当ててあります。\n今回、新たに aaaaa を加え、トップページに post と aaaaa の下にある記事を表示させようという考えです。\ncontent │ archives.md │ links.md │ ├─aaaaa │ │ _index.md │ │ │ └─2020-11-11 │ index.md │ └─post │ _index.md │ ├─2020-10-25 │ index.md │ └─2020-10-25-02 coffee-5498486_300.webp coffee-5498486_720.webp index.md post しか表示されんのだけど。 aaaaa を配置したのになぜか無視されて、今まで通りリスト表示されるのは post 内の記事だけ。\nリスト表示のテンプレートファイル（list.html）を開いてみましたら、気になるところが。\n{{- if .IsHome }} {{- $pages = where site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;in\u0026#34; site.Params.mainSections }} {{- end}} site.Params.mainSections これが呼ばれているっぽい。\nということは、post は該当するけど aaaaa はこれに該当しないということか。\n解決した。 メインセクションについて調べていたら、config.yml で設定できるみたい。 ということで、下記を追加しました。\nparams: mainSections: [\u0026#34;post\u0026#34;, \u0026#34;aaaaa\u0026#34;] toml の場合は : が = ですね。\nこれで狙い通りの表示がされるようになりました。\n_index.md について。 各サブディレクトリ ← これをセクションというんですが、ここに _index.md を置くことで、そのセクションに直接アクセスされたときに、セクション一覧が表示されるようにできます。\nhttps://hoge.com/post/ って指定したときにそれ以下の記事がリスト化する感じ。\nまぁ、無くても良いけど、一応置いてあります。\n","date":"2020-11-11T09:12:59+09:00","image":"https://k-kaz-git.github.io/images/divider-800.webp","permalink":"https://k-kaz-git.github.io/p/hugo-section/","title":"Hugo Section"},{"content":"Hugo のタグとかカテゴリとか この前、k-kaz が自作テーマで遊ぶサイト に タグとかカテゴリとか という記事を書きました。\nタグとかカテゴリのリンクををクリックしたときに、そのグループだけではなく、全記事が出てきちゃう！ というものです。\n自作テーマだから、うまく作り込めていないんだと思っていましたが、このサイトも同じじゃないか。\n以前は正しく動作していたはずなので、Hugo のバージョンを上げたとき、仕様変更によって動作が変わったと思われます。\nちょろっと調べた \\layouts\\_default に taxonomy.html と terms.html を置くと、良いらしい。\n中身の書き方はいまいち分かっていないので、ここには書きませんが、とりあえず k-kaz が自作テーマで遊ぶサイト では、動作しました。\nただのリンクが並ぶだけで、味も素っ気もないんですが。\n本当はタグやカテゴリのタイトルを出したり、トップページと同じようなレイアウトにしたいんだけど。\nまた時間のあるときに挑戦しよう。\nあと、このサイトも直さなきゃ。（時間のあるときに）\n2023-02-14 追記 やっと直した。\nというか、完全に忘れていました・・・。\n別件でたまたまこちらのサイトを見ていて、タグをクリックしたのに絞り込みが出来ていないことを発見しました。\nしばらく考えたり試したりしているうちに、この記事も発見。\n以前から出来ていなかったのね。\nやったこと 上に書いてある taxonomy.html や terms.html を置いてみてもうまく動作せず。\nあちこち見てたら、本テーマ（aether）の場合はこれらファイルは必要ありませんでした。\nlist.html li.html li-next.html で動作させているみたい。\n結果、自分で編集した list.html がおかしかったという悲しい結末になりました。\nということで、もともとThemeに入っていた list.html を持ってきて、希望する編集を加えたものを置き直しました。\n分かると、なぁ～んだって感じ。\n","date":"2020-11-05T12:57:30+09:00","image":"https://k-kaz-git.github.io/images/labels-4924676_800.webp","permalink":"https://k-kaz-git.github.io/p/hugo-%E3%81%AE%E3%82%BF%E3%82%B0%E3%81%A8%E3%81%8B%E3%82%AB%E3%83%86%E3%82%B4%E3%83%AA%E3%81%A8%E3%81%8B/","title":"Hugo のタグとかカテゴリとか"},{"content":"次に目を付けたテーマは Pagermod です。 不定期でお送りしているテーマのカスタマイズコーナー。\n今回は Pagermod というテーマをカスタマイズしていきます。\nPaperMod | Hugo Themes\nとはいえ、かなりシンプルなテーマであり、選んだ時点である程度、自分好みの状態ですから、あまり記事にはならないかも。\nこちらの記事はカスタマイズを加える度に、ちょこちょこと更新していきます。\nテーマを弄る前に。 テーマファイルを弄る方には当たり前の話かと思いますので、ご存知の方は読み飛ばしてください。\nHugo のテーマは下記にあります。\nサイト名\\themes\\\nPagermod の場合は サイト名\\themes\\Pagermod\\ です。\n修正するときは、この中のファイルを直接直しません。\n修正したいファイルをコピーして、しかるべき場所に置いてから、そちらを修正します。\nその場所が、テーマ読み込み時に優先される仕組みになっているため、テーマの更新などがあっても影響を受けない ようになっています。\n例えば、サイト名\\themes\\hugo-PaperMod\\layouts\\partials\\home_info.html というファイルを弄りたい場合、サイト名\\layouts\\partials\\ というフォルダを用意して、そこに home_info.html を持ってきて修正するわけです。\nフォルダ構成はまったく一緒です。単純に \\themes\\hugo-Pagermod\\ が外れるだけと考えて良いかと思います。\nこのテーマで気付いたこと。 モード選択。 流行りのライトモードとダークモードの切り替え機能が搭載されています。\nライトモードは背景が白っぽく、文字は黒っぽく。\nダークモードは背景が黒っぽく、文字は白っぽく。\nスイッチ1つでどうやって切り替えているのかなと思ったら、スタイルシート内に秘密がありました。\nvar()関数。 初めて見た、この関数。\n予め 定義しておいた内容を呼び出す関数 だそうです。\n中身が呼び出すことで変わるので CSS変数 と呼んだりもするそう。\nPagermod の場合、theme-vars.css の中で、ライトモードが .root ダークモードが .dark で定義されています。\n:root { --theme: #fff; --entry: #fff; --primary: rgba(0, 0, 0, 0.88); --secondary: rgba(0, 0, 0, 0.56); --tertiary: rgba(0, 0, 0, 0.16); --content: rgba(0, 0, 0, 0.88); } .dark { --theme: #1d1e20; --entry: #2e2e33; --primary: rgba(255, 255, 255, 0.84); --secondary: rgba(255, 255, 255, 0.56); --tertiary: rgba(255, 255, 255, 0.16); --content: rgba(255, 255, 255, 0.64); } 長くなるので途中の行とか割愛しましたが、こんな感じです。\n定義したものを使うには、\na { color: var(--entry); /* リンクの色を定義 */ } とします。\nすると、ライトモードのときは #fff が、ダークモードのときは #2e2e33 が入るというわけ。 なんだこれ、超便利じゃないか。\nもちろん、色だけではなく、フォントのサイズとかでも同様に使えます。\nフォントサイズについて。 これまで出会ったテーマは、レスポンシブデザインの対応として、フォントサイズを可変にしていました。横幅（width）のサイズから算出するとかね。\nPagermod では画面サイズに関係無く、フォントサイズは決め打ち です。\nつまり、パソコンで見ようが、スマホで見ようが、文字サイズは常に同じ。\nこれってどうなんでしょうね。\nタイトルタグとか、かなり文字サイズが大きいので、スマホで見ると見やすいんだけど文字数が溢れて改行しちゃうのよね。\nやっぱりここは手を入れて可変にしようかなと悩んでいます。\nPagermod のカスタマイズをしていきます。 アイコンを消したい。 記事内に共有アイコン、トップページにソーシャル系アイコンが搭載されています。\n私は基本それらを使わないので、消し去ります。\n記事内の共有アイコンを消す。 こちらは簡単。\nサイト全体の構成を司る config.yml or config.toml の記述を1箇所変えるだけ。\nちなみにこのテーマの初期値は config.yml なので、以下こちらで統一します。\nShowShareButtons: false # True にすれば表示するよ。 トップページのソーシャル系アイコンを消す。 これも簡単ですが、ファイルを持ってくる必要があります。\nこれを → サイト名\\themes\\hugo-PaperMod\\layouts\\partials\\home_info.html\nここへ → サイト名\\layouts\\partials\\home_info.html\n修正します。 ソーシャル系アイコンは social_icons.html を使って表示していますので、その部分を消します。\nコメントアウトか、削除はお好みで。（私は削除）\n元ファイル（サイト名\\themes\\hugo-PaperMod\\layouts\\partials\\home_info.html ）\n{{- with $.Site.Params.homeInfoParams }} \u0026lt;article class=\u0026#34;first-entry home-info\u0026#34;\u0026gt; \u0026lt;header class=\u0026#34;entry-header\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;{{- .Title | markdownify }}\u0026lt;/h2\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;section class=\u0026#34;entry-content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{- .Content | markdownify }}\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;footer class=\u0026#34;entry-footer\u0026#34;\u0026gt; {{- partial \u0026#34;social_icons.html\u0026#34; $.Site.Params.socialIcons -}} \u0026lt;/footer\u0026gt; \u0026lt;/article\u0026gt; {{- end}} コピペしたファイル（サイト名\\layouts\\partials\\home_info.html）\n{{- with $.Site.Params.homeInfoParams }} \u0026lt;article class=\u0026#34;first-entry home-info\u0026#34;\u0026gt; \u0026lt;header class=\u0026#34;entry-header\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;{{- .Title | markdownify }}\u0026lt;/h2\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;section class=\u0026#34;entry-content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{- .Content | markdownify }}\u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;!-- ここをコメントアウト or バッサリ削除 \u0026lt;footer class=\u0026#34;entry-footer\u0026#34;\u0026gt; {{- partial \u0026#34;social_icons.html\u0026#34; $.Site.Params.socialIcons -}} \u0026lt;/footer\u0026gt; --\u0026gt; \u0026lt;/article\u0026gt; {{- end}} 右上のメニューをカスタマイズしたい。 2段階の修正が必要です。\nまずはメニューの文字列を表示する。\n次にその内容を表示する。\nメニューの文字列を表示する。 config.yml を開いて、表示したい文字列、優先順位等を記述します。\nmenu: main: - name: Archives # 表示される文字列 url: /archives/ # url weight: 5 # 表示順（小さいほど先に表示） - name: Tags url: /tags/ weight: 10 - name: Link # 今回追加 url: /links/ # 今回追加 weight: 12 # 今回追加 今回は Link というメニューを追加してみました。\nLink の中身を作ります。 下記の場所に links.md を設置します。\nサイト名\\content\\links.md\n$ hugo new links.md ファイルを作ったら、その中身を編集します。\n--- title: \u0026#34;Link\u0026#34; url: \u0026#34;/links\u0026#34; summary: \u0026#34;links\u0026#34; --- [k-kaz ブログ](https://k-kaz.net) [k-kaz が Hugo で遊ぶサイト](https://k-kaz-git.github.io) これで画面右上に Archives Tags Link が並び、クリックするとその中身が表示されます。\nトップページに記事のサマリーを表示する。 何も設定しない場合は、記事本文の先頭から何文字かがサマリーとして表示されます。 意図的に表示したい文言があるときは記事上部の設定部分に summary を入れます。\nsummary: \u0026#34;意図的に表示したい文言を書く。\u0026#34; Hugo のカスタマイズをします。（他テーマでも共通） この記事に載せなくても良いのですが、せっかくなので一緒に書いておきましょう。\n外部サイトを新しいタブで開く Hugo で外部サイトを新しいタブで開きたい。 を参照あれ。\n記事内の html を表示する。 Hugo v0.60.0 からの仕様で、記事に直接書いた html が表示されなくなった問題への対応です。\nちなみに表示されない部分は \u0026lt;!-- raw HTML omitted --\u0026gt; と置き換わっています。\nconfig.toml [markup.goldmark.renderer] unsafe= true config.yml markup: goldmark: renderer: unsafe: true 参考 → Link WordsConfigure Markup | Hugo\n参考 → あれ、引用がごっそり消えている\n日本語化 i18n 対応ですので、言語ファイルが用意されています。\nいつものごとく、テーマ内のファイルは直接触らず、コピペします。\n/home/k-kaz/data/git/k/themes/hugo-PaperMod/i18n → /home/k-kaz/data/git/k/i18n\n今回、日本語用のファイルを直したかったので、ja.yaml というものをコピペしました。\n元のファイル（こんだけしか無い)\n- id: prev_page translation: \u0026#34;前のページ\u0026#34; - id: next_page translation: \u0026#34;次のページ\u0026#34; こう直しました。\n- id: prev_page translation: \u0026#34;前のページ\u0026#34; - id: next_page translation: \u0026#34;次のページ\u0026#34; - id: read_time # ここから下を追記しました。 translation: one : \u0026#34;1 分\u0026#34; other: \u0026#34;約 {{ .Count }} 分\u0026#34; - id: toc translation: \u0026#34;目次\u0026#34; - id: translations translation: \u0026#34;Translations\u0026#34; 参考にしたのは、en.yaml のファイルです。\n実際に言語切り替えするときは、exampleSite のようにサイト上にスイッチを付けるのが良いのでしょうが、うちのサイトに日本語を読めない人は来ない という決め付けで、横着して config.yml で日本語を直指定しました。\ndefaultContentLanguage : ja # この行を追加です。 投稿日と更新日を表示したい。 初期状態だと投稿日のみが表示されています。\nまた、並びが「月、日、年」と、日本人の私には馴染みのないものなので一緒に直しましょう。\nテンプレートファイルをコピペします。 いつものようにテンプレート内から該当ファイルをコピペします。\nサイト名\\themes\\hugo-PaperMod\\layouts\\partials\\post_meta.html → \u0026quot;サイト名\\layouts\\partials\\post_meta.html\n元のファイル（該当部分だけ抜き出し）\n{{- if not .Date.IsZero -}} {{- $scratch.Add \u0026#34;meta\u0026#34; (slice (.Date.Format (default \u0026#34;January 2, 2006\u0026#34; .Site.Params.DateFormat))) }} {{- end -}} 修正後のファイル（2行目を修正しています）\n{{- if not .Date.IsZero -}} {{- $scratch.Add \u0026#34;meta\u0026#34; (slice \u0026#34;Posted\u0026#34; (.Date.Format (default \u0026#34;2006-01-02\u0026#34; .Site.Params.DateFormat)) \u0026#34;Updated\u0026#34; (.Lastmod.Format (default \u0026#34;2006-01-02\u0026#34;))) }} {{- end -}} 2行目のところで、日付の表示方法 default \u0026quot;2006-01-02\u0026quot; を決めてあげ、さらに最終更新日を取得する .Lastmod.Format を追加しました。\n日時の前に書く言葉はお好みでどうぞ。\nここでは Posted と Updated にしてあります。\nもちろん日本語でも良いですよ。\nただ、これだけだと、更新日時は正しく反映されません。\nもう1つ修正が必要です。\nconfig.yml も直します。 最終更新日時を Git の履歴から自動取得するには、config.yml に、1行追記が必要です。\nenableGitInfo: true これで更新日時が正しく反映されるようになります。\n現在の PageSpeed Insights はこんな感じ。 100点は気持ち良いね！！\n現状、99点～100点のところで、ほぼ安定しています。\n100点で安定させるには、記事のカバー画像をやめることかな。（データ量を減らす）\nでも、トップページが寂しくなっちゃうので、カバー画像ありで運用します。\n90点台後半が出ていれば十分でしょうしね。\n","date":"2020-10-28T12:32:55+09:00","image":"https://k-kaz-git.github.io/images/hugo-custom-theme-pagermod.webp","permalink":"https://k-kaz-git.github.io/p/%E3%83%86%E3%83%BC%E3%83%9E-pagermod-%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA/","title":"テーマ Pagermod のカスタマイズ"},{"content":"コンテンツ（画像とか）を同一フォルダに置きたい。 ここのサイトは昔からの Hugo のシキタリ通り、記事と画像が別フォルダになっています。\n記事：/content/post/hoge.md\n画像：/static/images/hoge.webp\n何も考えずに使える反面、記事数や画像数が多くなってくると、収集がつかなくなります。\nそんな声が多かったのでしょう。\nHugo で同一フォルダに記事と画像等のファイルを置ける ページバンドル という仕組みができました。\nk-kaz が好きなことを書くサイト では、その仕組みを利用しています。\n詳しくはこちらで。\nPage Bundles | Hugo\n画像が表示されないぞ。 今まで全然気付いていなかったというか、そもそも記事の中に画像を置くことが無かったので気付かなかったんですが、今回 画像を置いてみたら表示されないじゃん という現象に遭遇しました。\n若干設定が必要です。 インデックスファイルを置く。 まず、画像を表示させるには、そのフォルダの中に index.md というファイルが必要になります。\nこのファイルがあることで、そのフォルダ内にコンテンツが集約されているというような認識をしてくれます。\n今までは、hoge.md という記事を置いていましたが、こちらを index.md という名称に変更します。\nこれで画像が表示されるようになりました・・・が、URL がフォルダ名になっちゃう。\nURL を指定する。 これまでファイル名が URL になってくれていましたので、同じようにしましょう。\nindex.md の上部（各種設定内容を記述するところ）に1行追加します。\nurl: \u0026#34;hoge\u0026#34; これで意図した通りの URL になりました。\nついでにもうひと踏ん張り。 この URL を指定する記述を毎回入れるのは面倒ですし、そもそもこちらのサイトでは使わないので忘れそうです。\nということで、新規に記事を作成するとき、自動で記述されるようにしておきましょう。\n私の場合、下記ファイルが新規作成時に使われるものになりますので、開いて追記します。\n\\archetypes\\post.md\nこんな感じにしました。\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} description: \u0026#34;\u0026#34; image: \u0026#34;/images/k-kaz.webp\u0026#34; imageDescription: \u0026#34;k-kaz のサイトイメージ画像\u0026#34; url: \u0026#34;\u0026#34; categories: [\u0026#34;\u0026#34;] tags: [\u0026#34;\u0026#34;] toc: true draft: true --- これで良しと。\n","date":"2020-10-21T12:45:27+09:00","image":"https://k-kaz-git.github.io/images/hugo-contents.webp","permalink":"https://k-kaz-git.github.io/p/%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E7%94%BB%E5%83%8F%E3%81%A8%E3%81%8B%E3%82%92%E5%90%8C%E4%B8%80%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%81%AB%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88/","title":"コンテンツ（画像とか）を同一フォルダにする場合"},{"content":"Hugo の外部リンク Hugo って、html の a タグ（リンクを開くときに使います）をすべて同一タブで開きます。\nということは、今見ているページが、リンクをクリックした瞬間に、リンク先のページで上書きされるということ。\n自ドメイン内であればそのような挙動で全然良いのですが、外部サイトを開くときは、やっぱり新しいタブで開いてもらいたい。\nHugo v0.62 以降 直接 html を書いちゃうとか、方法はいくつかあるみたいですけど、現状は下記のやり方を公式で推奨している様子。\nリンクを開くときの挙動を指定 /layouts/_default/_markup/render-link.html というファイルを用意。\n中身は下記だけあれば良し。\n\u0026lt;a href=\u0026#34;{{ .Destination | safeURL }}\u0026#34;{{ with .Title}} title=\u0026#34;{{ . }}\u0026#34;{{ end }}{{ if strings.HasPrefix .Destination \u0026#34;http\u0026#34; }} target=\u0026#34;_blank\u0026#34;{{ end }}\u0026gt;{{ .Text }}\u0026lt;/a\u0026gt; 詳しくは公式サイトにて Markdown Render Hooks\n","date":"2020-10-19T12:28:18+09:00","image":"https://k-kaz-git.github.io/images/eagle-1753002_1280.webp","permalink":"https://k-kaz-git.github.io/p/hugo-%E3%81%A7%E5%A4%96%E9%83%A8%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E6%96%B0%E3%81%97%E3%81%84%E3%82%BF%E3%83%96%E3%81%A7%E9%96%8B%E3%81%8D%E3%81%9F%E3%81%84/","title":"Hugo で外部サイトを新しいタブで開きたい。"},{"content":"Hugo ってバージョンアップしてるの？ まずは、私が使っている現在のバージョンを確認。\n$ hugo version $ Hugo Static Site Generator v0.54.0/extended windows/amd64 BuildDate: unknown ふむ、0.54 を使っているらしい。\n公式サイトに行ってみると、0.76.5 が最新の様子。\nすっかり時代に取り残されていました。\n最新版にするには（Windows） Windows の場合は、GitHub から Zip を落としてきて、実行ファイルを入れ替えるだけで完了です。\nチェックしましょう。 とりあえず今までの記事が正常に見られるかチェック。\n$ hugo server -D Start building sites … WARN 2020/10/16 15:08:48 Page.RSSLink is deprecated and will be removed in a future release. Use the Output Format\u0026#39;s link, e.g. something like: {{ with .OutputFormats.Get \u0026#34;RSS\u0026#34; }}{{ .RelPermalink }}{{ end }} なんか怒られた。\n修正します。 調べてみたら、.RSSLink っていうのが最新版では使えないっていうことらしい。\nhead.html で使っていたので修正しました。\n{{ if .RSSLink }} \u0026lt;link href=\u0026#34;{{ .RSSLink }}\u0026#34; rel=\u0026#34;alternate\u0026#34; type=\u0026#34;application/rss+xml\u0026#34; title=\u0026#34;{{ .Title }}\u0026#34; /\u0026gt;{{ end }} ↓ こんな風に。\n{{ with .OutputFormats.Get \u0026#34;RSS\u0026#34; }} \u0026lt;link href=\u0026#34;{{ .RelPermalink }}\u0026#34; rel=\u0026#34;alternate\u0026#34; type=\u0026#34;application/rss+xml\u0026#34; title=\u0026#34;{{ $.Site.Title }}\u0026#34; /\u0026gt;{{ end }} これでエラーは出なくなった。\nあれ？ レイアウトが・・・ トップページのレイアウトがおかしい。\n今までは content/post/ 以下の記事がずらっと並んでくれたんですが、content が表示されてるっぽい。\n画面に出ている post をクリックして開くといつもの感じになるけど、仕様が変わったのかな・・・。\n調査開始 まずは定番 Google でいろいろ調べました。\nまったく分からんかったけどね。\nPermalink の設定でなんとかならんもんかと四苦八苦するものの駄目でした。\n地道に仕様変更を探る どのバージョンからレイアウトが崩れているのか、GitHub から過去バージョンを落としまくって調査しました。\nv0.60.0 NG\nv0.57.0 NG ← お前か！\nv0.56.0 OK\nv0.56.3 OK\nリリース情報の中身を念入りチェックしていたら、気になる一文を発見。\nhome.Pages now only returns pages in the top level section. Before this release, it included all regular pages in the site. This made it easy to list all the pages on home page, but it also meant that you needed to take special care if you wanted to navigate the page tree from top to bottom. If you need all regular pages, use .Site.RegularPages. GitHub 英語読めないので、翻訳しました。\nhome.Pagesはトップレベルセクションのページのみを返すようになりました。 このリリースの前は、サイト内のすべての通常のページが含まれていました。 これにより、ホームページ上のすべてのページを簡単にリストアップすることができましたが、 ページツリーを上から下に移動したい場合には、特別な注意が必要なことも意味していました。 すべてのレギュラーページが必要な場合は、.Site.RegularPagesを使用してください。 GitHub これだ。\n\\themes\\xxxx\\layouts\\_default\\list.html の中に .Pages を使っていたので、そこを .Site.RegularPages に直すことで解決しました。\n半日近くかかったよ。\nあれ、引用がごっそり消えている たまたま気付いたんですが、引用した部分がごっそり消えていたんですよ。\nhtml のソースを見ると、その部分が\n\u0026lt;!-- raw HTML omitted --\u0026gt; となっていました。\nこれは Google ですぐに見付けました。\nv0.60.0 から、記事ファイル（hoge.md）に書かれた html が表示されなくなったとのこと。（なんで？）\n解決策は config.toml にオプションを追加すればオッケー。\n[markup.goldmark.renderer] unsafe= true すぐ直って良かった。\nということで、今回から最新版の Hugo を使っていきます。\n","date":"2020-10-18T20:00:29+09:00","image":"https://k-kaz-git.github.io/images/man-1394395_1920.webp","permalink":"https://k-kaz-git.github.io/p/%E3%81%9D%E3%81%86%E3%81%A0-hugo-%E3%81%AE%E6%9C%80%E6%96%B0%E7%89%88%E3%82%92%E4%BD%BF%E3%81%8A%E3%81%86/","title":"そうだ Hugo の最新版を使おう！"},{"content":"1年半振りの Deploy で・・・ Netlify に記事を上げようと思って、./deploy.sh （※スクリプトを組んである）とやってみたけど、うまくいかず。\nうっかりやってしまう draft: false もちゃんとなっているし、なんだろうと思って、ひとつずつチェックしてみました。\nひっかかったのが、ssh 認証のところ。\nssh -T git@github.com で、ssh が通るか試してみたら、git@github.com: Permission denied (publickey). って怒られました。\n$ ssh -T git@github.com /* ssh が通るか試すコマンド */ $ git@github.com: Permission denied (publickey). ネットで調べてみたところ、 「Github に公開鍵（publickey）を登録しましょう」 と書いてあったので、1年半振りの Github ログイン。\nお前、本当に k-kaz か？\nメール送ったから、そこに書かれた6桁のコードを入れてみろよ！\nって、疑われ、言われた通りに6桁のコードを入れてログイン。\nssh の項目 を覗くと公開鍵がありません。\nPC に保存していた公開鍵の中身を登録して、再度 ssh -T git@github.com を実行すると、うまく繋がりました。\n1年半の間に仕様が変わったのか、削除されちゃったのかよく分かりませんが、再登録した形ですね。覚えていないけど、たぶん。\nで、Netlify にもログインする必要がありました。 こちらは疑われることなくできましたが、ここまでやらないと記事の反映ができなかったです。\n","date":"2020-10-14T18:51:11+09:00","image":"https://k-kaz-git.github.io/images/hugo-deploy-error.webp","permalink":"https://k-kaz-git.github.io/p/deploy-%E3%81%A7%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E5%87%BA%E3%81%9F%E3%82%93%E3%81%A7%E3%81%99%E3%81%91%E3%81%A9/","title":"Deploy でエラーが出たんですけど。"},{"content":"Hugo の目次について Hugo には、コンテンツ内に登場する見出しタグ（H）を自動的にリスト化してくれる機能 TableOfContents が用意されています。\nそれすなわち、目次ですね。\n使い方 single.html なんかの表示したい部分にこれを追記します。\n{{ .TableOfContents }} たったこれだけです。\n出力サンプル \u0026lt;nav id=\u0026#34;TableOfContents\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#h2-見出しタイトル-その１\u0026#34;\u0026gt;H2 見出しタイトル その１\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#h2-見出しタイトル-その２\u0026#34;\u0026gt;H2 見出しタイトル その２\u0026lt;/a\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#h3-見出しタイトル\u0026#34;\u0026gt;H3 見出しタイトル\u0026lt;/a\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#h4-見出しタイトル\u0026#34;\u0026gt;H4 見出しタイトル\u0026lt;/a\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#h5-見出しタイトル\u0026#34;\u0026gt;H5 見出しタイトル\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;nav id=\u0026quot;TableOfContents\u0026quot;\u0026gt; というタグで囲まれたリストが出来上がります。\nあとはお好みのスタイルを適用してあげるだけ。\n考慮すべき点 見出しタグが無い場合に、空っぽのリストが出てきちゃうので、対策が必要です。\n自動で見出しタグの有無を判断し、無い場合は目次を出さない やり方は、なんとなく分かっているんですが、まだ内容を理解出来ていないので、また今度。\n400字未満の場合は目次を出さない 公式サイト に記述があります。\n短い記事であれば目次は要らんでしょうという考え方かな。\nif文で文字数の判断をして、出す出さないを決めています。\n{{ if and (gt .WordCount 400 ) (.Params.toc) }} \u0026lt;aside\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h2\u0026gt;{{.Title}}\u0026lt;/h2\u0026gt; \u0026lt;/header\u0026gt; {{.TableOfContents}} \u0026lt;/aside\u0026gt; {{ end }} 記事毎にフラグを立てる 自作テーマで立ち上げている Nerlify のほう k-kaz が好きなことを書くサイト はコレを採用しています。\nsingle.html にはこのように記述。\n{{ if eq .Params.toc true }} \u0026lt;aside\u0026gt; {{ .TableOfContents }} \u0026lt;/aside\u0026gt; {{ end }} 記事 hoge.md のパラメータ部分に追加。\ntoc: true この2つをセットにして、記事の toc というパラメータが true なら、{{ .TableOfContents }} を実行するようにしています。実行したくなければ false としておきます。\nまた、毎回書くのも面倒なので、archetypes/post.md という記事のテンプレートファイルに予め入れました。\nちなみにこのサイトでは・・・ 必ず目次は表示する、そして、必ず見出しを書く という、己に厳しいルールが制定されているので大丈夫です（笑）\nイヤイヤ、いずれちゃんと設定します・・・。\n”目次” という言葉 これまで html に直接書いていたんですが、toc: false にしても、”目次” だけ出てきちゃうんですよね。\n{{ .TableOfContents }} のところを {{ partial \u0026quot;toc.html\u0026quot; . }} として、別途用意した toc.html の中で ”目次” と書いておけば、不要なときに呼びされずに済んでスマートです。\n私は別ファイルを用意するのが面倒だったので、スタイルシートの中で ”目次” を呼び出すようにして、良しとしました。（横着）\naside::before { content: \u0026#34;目次\u0026#34;; } ","date":"2019-04-02T19:26:27+09:00","image":"https://k-kaz-git.github.io/images/hugo-tableofcontents-menu.webp","permalink":"https://k-kaz-git.github.io/p/hugo-%E3%81%AE%E7%9B%AE%E6%AC%A1%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%80%83%E3%81%88%E3%82%8B/","title":"Hugo の目次について考える"},{"content":"これまでと急に内容変わりますが・・・ Hugo に関連しませんけど、技術的な話ということでこちらに書いていきます。\nそもそも Mozc って何？ Mozcとは、Google 日本語入力のオープンソース版である。これは2010年5月11日にGoogle日本語入力をGoogle Chrome OSに移植するために必要な部分をオープンソースしたものである。 Wikipedia まぁ、簡単に言うと Linux で使える Google 日本語入力 です。\nこの便利な Mozc ですが、Linux で普通にインストールされるものって、バージョンが古かったり、カタカナ辞書が付いていなかったりするんですよ。\n元々インストールされていたのは、Ver.2.20 で、新たに入れるのは Ver.2.23 です。そして、追加辞書も付いています。\n自分で、カタカナ辞書を用意してユーザー辞書に追加もしていましたが、変換時はユーザー辞書が優先されるので、普通にカタカナを入れたいのに、いちいち英語になったりして、面倒だったりね。\nなんか、Windows に比べて変換効率も悪いので、なんとかならないかとネットで調べていたところ、最新の Mozc を Linux にインストールする方法が見付かったので、やってみました。\nちなみに、昔は KAKASI（KAnji KAna Simple Inverter）とか使っていましたよ。\n最新版 Mozc のインストール 先程書きました通り、普通にインストールするとバージョンが古いので、「ソフトウェアの管理」（Linux Mint）は使いません。\nソースを持ってきまして、それをビルドして使えるようにします。\nいきなり難しそうだ（笑）\nソースをゲット ソースはこちらにありますよ。\nmozc ut for ubuntu\n今回は mozc-2.23.2815.102+dfsg~ut2-20171008d+20181201.tar.xz を利用しました。\nダウンロード後、解凍しておきます。\nビルド 解凍したところに build_mozc_plus_utdict というファイルができますので、これを実行します。\nでも、足りないパッケージなどがあるので、事前に入れておきます。\n$ sudo apt update $ sudo apt upgrade -y $ sudo apt install -y devscripts debhelper libibus-1.0-dev pkg-config libxcb-xfixes0-dev libgtk2.0-dev python-dev gyp protobuf-compiler libprotobuf-dev qtbase5-dev libqwt-qt5-dev libgwengui-qt5-dev libuim-dev libzinnia-dev fcitx-libs-dev gettext desktop-file-utils ninja-build 入れ終わったら、ビルドします。\n$ sudo ./build_mozc_plus_utdict しばらく、ハードディスクがカリカリと頑張ってくれます。\n運悪くビルドに失敗したら、ログに理由が書いてあると思いますので、ネットで頑張って調べます（笑）\n事後処理 無事にビルドが終了したら、インストール済みのパッケージを削除します。\n$ sudo apt-get remove mozc-server mozc-utils-gui fcitx-mozc を使っているので、関連ファイルをインストール。\n$ sudo dpkg -i mozc*.deb fcitx-mozc*.deb 結果、こうなります。 以上です。\n参考サイト 今回の作業は、下記、2サイト様を参考にさせていただきました。\nありがとうございます。\nLinux Mint 18 : 「Mozc UT2 Dictionary」「郵便番号」「ニコニコ大百科」「顔文字」で辞書を強化する\nMozc UT2をインストールする - Ubuntu 18.04編\n","date":"2019-03-31T17:45:32+09:00","image":"https://k-kaz-git.github.io/images/origami-japan_640.webp","permalink":"https://k-kaz-git.github.io/p/mozc-ut2-%E3%82%92-install-%E3%81%97%E3%81%9F%E3%82%88/","title":"Mozc Ut2 を Install したよ。"},{"content":"Hugo のテーマを自作する 本家のほうでも書きました けど、Hugo のテーマを弄っていたら、次は自作かなと思って、手を付けてみました。\n結果として、途中でやめました。\nだって、今使っているこのテーマ aether に段々と似てきたんですもの。\nスタイルシートをコピペしたりしてたから、当然だけど。\nまぁ、このテーマを気に入っているということですよ。\nmemo ↑ これ、[iframely](URLhttps://iframely.com) というサービスを使っています。 最初、情報取得の際にエラーを起こしていたんですが、URL に日本語が含まれていたからでした。 使用される方はご注意あれ。 あと、超でっかく表示されているので、スタイルシートで調整しました。\n一から作って、こんな感じのところまで出来ました 素人のわりには、それっぽくなっているでしょ。\nトップ 投稿記事 覚書を残す テーマ作りは途中でやめましたが、やり方をこちらに残しておきましょう。\nまたいつか暇な時に続きをしたくなるかもしれないし。\nローカルサイトと空テーマの準備 $ hugo new site hoge /* サイト hoge 作成 */ $ cd hoge $ hugo new theme hoge-theme /* 空テーマ hoge-theme 作成 */ テーマ内で最低限必要なもの 最低限って書くと、ヘッダーもフッターも要らないけど・・・一応書いておく（笑）\nline-hight の関係で、線がブツブツ切れていますが、許してください。\nhoge-theme │ theme.toml ├──layouts │ │ │ ├──partials │ │ footer.html \u0026lt;!-- フッター（ページ最下層）のパーツ --\u0026gt; │ │ head.html \u0026lt;!--ヘッダー（ページ最上層）のパーツ --\u0026gt; │ │ │ └──_default │ baseof.html \u0026lt;!-- ページの元で各種パーツを読み込む --\u0026gt; │ list.html \u0026lt;!-- 記事一覧出力 --\u0026gt; │ single.html \u0026lt;!-- 投稿記事出力 --\u0026gt; 簡単に構成を書く baseof.html が、すべての html の親玉で、その中身はこんな感じになっています。\n頭 head.html\n体 list.html or single.html\n足 footer.html\nバラバラで作ってあるパーツを、必要なときに、必要な場所で読み込むことで、1枚のページを作り上げています。\nbaseof.html の例\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; {{ block \u0026#34;head\u0026#34; . }} {{ end }} \u0026lt;title\u0026gt;{{ block \u0026#34;title\u0026#34; . }} {{ .Site.Title }} {{ end }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; {{ block \u0026#34;main\u0026#34; . }} {{ end }} {{ block \u0026#34;footer\u0026#34; . }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 各パーツに機能を持たせて、それを呼び出しているため、非常にシンプルな構成となります。\n各パーツに書いておくコマンド → {{ define \u0026quot;hoge\u0026quot; }}...{{ end }}\n呼び出し用コマンド → {{ block \u0026quot;hoge\u0026quot; . }}{{ end }}\n呼び出されると、各パーツに書かれている ... の部分がすべて展開される形。\n大体、{{ block \u0026quot;main\u0026quot; . }}{{ end }} のところにコンテンツも含まれているので、ここで記事が出力されると思ってください。 普通、single.html の中に {{ .Content }} と書いてあります。\nあとは好きなようにスタイルシートで装飾をしたり、メニューを作ったり。\nとりあえず、今回はここまで。\nその後 ［2019-03-27］ どうも気に入らなくて、再度作成中 細々したところがどうも気に入らなくて、もう一度作っています。\nトップページ（モバイル系） 縦並びです。\nトップページ（PC系） 最大で4記事まで横に並び、それを超えたら2行、3行という形で表示します。 投稿記事 こんな感じ。 今回気付いたこと 新たにテーマを作り直しながら、気付いたことを書いておきます。\nnetlify で baseof.html を使う場合は注意 こうやって、{{ define \u0026quot;header\u0026quot; }} を入れた header.html を読み込んだんですけど、\n\u0026lt;head\u0026gt; {{ block \u0026#34;header\u0026#34; . }}{{ end }} \u0026lt;/head\u0026gt; ローカルサーバーではうまく表示されるのに、netlify だとうまく表示されない。\n具体的には、ファイルを読み込めずに \u0026lt;head\u0026gt; の中身が空になります。 正確に書くと、netlify で生成した際の Hugo バージョンがメタ情報として載るだけ。\nということで、header.html の読み込みは諦め、中身をそのまま baseof.html に直書きして対処しました。美しくないけど。\nフォント調整 いろんなサイトで調べたんですけど、調べれば調べるほど、どツボにハマる感じ。\n今の主流は、レスポンシブデザインを意識して、サイト全体でのフォントサイズを指定するみたい。 それ以下については、基準に対して rem で指定することで調整すると。\nその中で、一番、理想的なのがこれかなと思いました。 横幅全体を 32 で割ったサイズ。\nfont-size: calc(100vw / 32); 試したところ、モバイル系は良かったんですが、PC の大画面で見ると、フォントが大きくなり過ぎて困る。 rem で調整するのも当時（昨日だけど）は面倒でした。\nその後、cupper でも使われていた下記にしました。\nfont-size: calc(1em + 0.33vw); 基本となるサイズ（1em = 16px だっけ？）に対し、画面の大きさにあわせてプラスをしていく方法。 こちらのほうが、個人的には微調整がしやすかったです。（昨日苦労したのが役に立っただけ疑惑あり ）\npx で直接指定するのが一番楽っていえば楽なんですけど、レスポンシブデザイン の呪いが。\nスタイルシートの書き方 PC用のスタイルを定義して、その後にモバイルの定義かと思っていましたが、逆でありました。 先にモバイルです。今はモバイル優先で何事も考えたほうが良さそうです。\nモバイルのところは普通にスタイルシートを書いて、一通り終わったら PC の番です。\n/* 画面サイズ 481px 以上はこの中で設定 */ @media only screen and (min-width: 481px) { body {} h1 {} h2 {} } 面倒なので中身は空にしましたけど、モバイルの指定と変えたい部分（特にフォントサイズ）だけをここで定義していきます。 同じようなことをスタイルシートの上部と下部で書いていきます。だらだらと長くなります（笑）\nあと、同じ定義をした場合は下のほうが優先されるようです。\nなんで反映されないのかと思ったことが何度もありました（恥）\n","date":"2019-03-18T12:31:49+09:00","image":"https://k-kaz-git.github.io/images/horse-colorful_640.webp","permalink":"https://k-kaz-git.github.io/p/hugo-%E3%81%AE%E3%83%86%E3%83%BC%E3%83%9E%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%88/","title":"Hugo のテーマを作ったよ。"},{"content":"シンタックスハイライトの色を変更したい グレーの背景でやさしい表現も良いんですが、やっぱり背景は黒 ですよね。\nどうも、黒好き星人です。\n黒になったらどんな感じになるんだろうと、ワクワクしながらブラウザのデベロッパーツールで黒くしてみたら、文字が見にくい。\nそりゃそうです。\nやさしいグレーの背景に合わせた文字の色ですから。\nさぁ、文字色も含めてカスタマイズです。\nシンタックスハイライトって何？ シンタックスハイライト (英: syntax highlighting, 構文強調) とは、テキストエディタの機能であり、テキスト中の一部分をその分類ごとに異なる色やフォントで表示するものである。シンタックスカラーリング (syntax coloring) とも。 この機能により、プログラミング言語やマークアップ言語といった構造化された言語において、その構造や構文上のエラーが視覚的に区別しやすくなるため、ソースコードの記述が容易となる。 wikipedia 結果からお見せすると、こんな感じです 変更前 ### 変更後 Hugo におけるシンタックスハイライト Go の機能を使う方法と、highlight.js を使う方法の2種類が主流のようです。\n私は aether で採用されていることもあり、後者で行うことにしました。\n私のやり方はイレギュラーかも・・・ 私のやり方はちょっとイレギュラーな形かもしれません。\nhighlight.js のテーマを変更してみたものの、一部しか反映されなかったんです・・・。\nということで k-kaz のやり方 aether の中を覗いていたら、シンタックスハイライト用と思われるスタイルシートを発見しました。\nthemes/aether/static/css/xcode.css\nもしかしたら、この影響でうまく反映されなかったのかもしれません。\nというか、絶対そうだ。\nよく見付けた、私！！\nここで指定されているスタイルを自分好みに変えていきます。\n基本的には色だけ変えていけば良いのですが、スタイルの組み合わせもご自由に。\nxcode.css みたいに、スタイルシート専用のファイルを用意しても良いし、既存のファイルに追記する形でも良いです。\n私は assets/sass/hoge.scss に追記しましたが、新規で用意する場合は static/css/hoge.css として \u0026lt;head\u0026gt;～\u0026lt;/head\u0026gt; で読み込むなり、CSS内で読み込むなりして反映させましょう。\nいまのスタイルシートはこんな感じ メモ 2019-03-15 時点でのスタイルです。 気分でチョコチョコ変えていきますので、「今と違うじゃんか！」と怒らないでください。 /* 背景真っ黒！！ プログラム毎に class が変わるのでワイルドカードで */ code[class*=\u0026#34;language-\u0026#34;] { background: #000 !important; color: #fffaf0; } /* ここから下がコード用のスタイル */ .hljs-comment, .hljs-quote { color: #90ee90; } .hljs-keyword, .hljs-selector-tag, .hljs-literal { color: #ffff00; } .hljs-name { color: #4682b4; } .hljs-variable, .hljs-template-variable { color: #660; } .hljs-string { color: #ff7f50; } .hljs-regexp, .hljs-link { color: #080; } .hljs-title, .hljs-tag, .hljs-symbol, .hljs-bullet, .hljs-meta { color: #c0c0c0; } .hljs-number { color: #7cfc00; } .hljs-section, .hljs-class .hljs-title, .hljs-type, .hljs-attr, .hljs-built_in, .hljs-builtin-name, .hljs-params { color: #87ceeb; } .hljs-attribute, .hljs-subst { color: #87ceeb; } .hljs-formula { background-color: #eee; font-style: italic; } .hljs-addition { background-color: #baeeba; } .hljs-deletion { background-color: #ffc8bd; } .hljs-selector-id, .hljs-selector-class { color: #ff8c00; } .hljs-doctag, .hljs-strong { font-weight: bold; } .hljs-emphasis { font-style: italic; } せっかくなので、正しいやり方も紹介 いつか、自分が使うことになるかもしれないしね。\nGo 機能を使う場合 今は、Go に搭載されている機能で、シンタックスハイライトが可能になっています。\nconfig.toml で有効化 pygmentsCodefences = true pygmentsUseClasses = true スタイルの選択 hugo gen chromastyles --style=hoge \u0026gt; syntax.css\nhoge のところを好きなテーマにしてあげると、そのスタイルシートが syntax.css に出力され、これを \u0026lt;head\u0026gt;～\u0026lt;/head\u0026gt; の中で読み込んであげれば良いです。\nテーマは下記を参考にしてください。\nPygments style gallery!\nmonokai って結構有名ですよね。\nいろんなエディタのテーマで紹介されます。\nhighlight.js を使う場合 私が使っている aether ではこちらを採用しています。\nスタイルの選択 こちらにもテーマが沢山あって、下記から選ぶことができます。\nhighlight.js demo\n設定の仕方 下記を \u0026lt;head\u0026gt;～\u0026lt;/head\u0026gt; に入れてあげましょう。\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/styles/default.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/highlight.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;hljs.initHighlightingOnLoad();\u0026lt;/script\u0026gt; 9.15.6 は現在の最新バージョンです。ここは値が変わるので、使用する場合は公式サイトで確認をお願いします。\n尚、一番上にあるファイル名 default.min.css を好きなテーマに変えてあげると、スタイルが反映されます。\naether の場合 themes/aether/layouts/partials/scripts.html で、上記を読み込んでいるので、そこを変えてあげれば良いはずなんですけど、1行目（テーマ）が見当たらず。もしかしたら、そこを省略して、自前のスタイルシートを使っていたのかなと思えてきました。\nということで、最初に紹介した スタイルシートで調整 という方法をとったんですが、aether の場合はそれが正解っぽいですね。\n他のテーマならこの手順で良いかと思います。\n","date":"2019-03-14T17:44:58+09:00","image":"https://k-kaz-git.github.io/images/colorful-balloons-640.webp","permalink":"https://k-kaz-git.github.io/p/%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88%E3%82%92%E8%87%AA%E5%88%86%E5%A5%BD%E3%81%BF%E3%81%AE%E8%89%B2%E3%81%AB%E3%81%99%E3%82%8B/","title":"シンタックスハイライトを自分好みの色にする"},{"content":"Shortcodes を作りましょう 少し前に勉強しましたので、実際に作ってみましょう。\nHugo の Shortcodes を使ってみる。\n注意 こちらのサイトでは、スタイルシートを `scss` で書いています。 そこからコピペしてきたものを `css` に手直ししながら掲載しているので、もしかしたら記述ミスがあるかもしれません。その際はご容赦ください。 また、おかしな部分は、こっそり教えていただけると助かります。 メモを挿入する 完成形 メモ メモ書きを記事内に挿入するためのショートコードです。 うまく出来ているでしょうか。 基本形はいつもの サルワカさん から頂戴しています。\n中身 記述例 これを直したい 通常のコード入力だと Shortcodes が展開されちゃうので、毎回 gist に頼っています。それをなんとかしたい今日このごろ。 memo.html \u0026lt;div class=\u0026#34;memo\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;memo-title\u0026#34;\u0026gt;{{.Get 0}}\u0026lt;/span\u0026gt; \u0026lt;p\u0026gt;{{.Inner}}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; hoge.css .memo { position: relative; margin: 2em 2em; padding: 0.5em 1em; border: solid 1px #a9a9a9; background: #f5f5f5; max-width: 70%; } .memo .memo-title { position: absolute; display: inline-block; top: -26px; left: -1px; padding: 0 9px; height: 25px; line-height: 25px; vertical-align: middle; font-size: 0.8em; background: #a9a9a9; color: #ffffff; font-weight: bold; border-radius: 5px 5px 0 0; } .memo p { margin: 0; padding: 0; font-size: 0.8em; } VSCode にスニペット登録 引用を挿入する ［2019-03-15］ 完成形 引用（いんよう、英語：citation, quotation）とは、広義には、自己のオリジナル作品のなかで他人の著作を副次的に紹介する行為、先人の芸術作品やその要素を副次的に自己の作品に取り入れること。 Wikipedia 中身 記述例 blockquote.html \u0026lt;blockquote\u0026gt; \u0026lt;p\u0026gt;{{.Inner}}\u0026lt;/p\u0026gt;\u0026lt;br\u0026gt; \u0026lt;cite\u0026gt;\u0026lt;a class=\u0026#34;author\u0026#34; href=\u0026#34;{{.Get \u0026#34;link\u0026#34;}}\u0026#34;\u0026gt;{{.Get \u0026#34;author\u0026#34;}}\u0026lt;/a\u0026gt;\u0026lt;/cite\u0026gt; \u0026lt;/blockquote\u0026gt; hoge.css blockquote { font-size: 0.8em; padding-bottom: 0; } blockquote a.author { font-size: 1em; line-height: 3em; font-style: normal; text-decoration: none; border-bottom: 1px dashed; } blockquote a.author:hover { font-weight: bold; border-bottom: 2px dashed; } ","date":"2019-03-14T12:42:21+09:00","image":"https://k-kaz-git.github.io/images/shortcodes-vegetables-make_640.webp","permalink":"https://k-kaz-git.github.io/p/%E8%87%AA%E4%BD%9C%E3%81%AE-hugo%E7%94%A8-shortcodes/","title":"自作の Hugo用 Shortcodes"},{"content":"Cupper のカスタマイズをこちらにまとめます。 全然スタイルが適用されないんですけど（泣） aether は、簡単にスタイルの変更が出来たんですけど、Cupper は全然適用されない。\n何でだろうと調べていたら、テーマによっては config.toml に手を入れなければいけないものがあることを知ったおじさんです。\n[params] customCSS = [\u0026#34;/css/hoge.css\u0026#34;] こうすることで、static/css/hoge.css が元のスタイルシートの上に被さるようになるんだって。\nもちろん \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; に読み込み用の追記が必要です。\n\u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;/css/hoge.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; スタイルを弄る前段階で躓きましたよ・・・。\n標準機能内 ロゴ画像を差し替える SVG形式のロゴ画像が必要になります。\n私は Inkscape で作りました。\nlogo.svg というファイル名で保存して、下記に保存すると適用されます。\nstatic/images/logo.svg\n標準機能外 h2 に付くリンクアイコンを消す before: after: WordPress では、Font Awesome を使って、スタイルシートで設定していたので、これも同じかと思いきや、完全に外していました（笑）\n画像ファイルで指定していましたので、そのファイルを修正します。\nthemes\\cupper-hugo-theme\\layouts\\partials\\svg.html\n↓ にコピーします。\nlayouts\\partials\\svg.html\nこの中にある \u0026lt;symbol id=\u0026quot;link\u0026quot;\u0026gt; ～ \u0026lt;/symbol\u0026gt; というのが、h2 のところで使われているリンクアイコンなので、該当行を丸ごと削除すれば、きれいに消えます。\n\u0026lt;symbol id=\u0026#34;link\u0026#34; viewBox=\u0026#34;0 0 50 50\u0026#34;\u0026gt; \u0026lt;g transform=\u0026#34;translate(0 -1002.4)\u0026#34;\u0026gt; \u0026lt;g transform=\u0026#34;matrix(.095670 0 0 .095670 2.3233 1004.9)\u0026#34;\u0026gt; \u0026lt;g\u0026gt; \u0026lt;path style=\u0026#34;stroke-width:0;fill:currentColor\u0026#34; d=\u0026#34;m452.84 192.9-128.65 128.65c-35.535 35.54-93.108 35.54-128.65 0l-42.881-42.886 42.881-42.876 42.884 42.876c11.845 11.822 31.064 11.846 42.886 0l128.64-128.64c11.816-11.831 11.816-31.066 0-42.9l-42.881-42.881c-11.822-11.814-31.064-11.814-42.887 0l-45.928 45.936c-21.292-12.531-45.491-17.905-69.449-16.291l72.501-72.526c35.535-35.521 93.136-35.521 128.64 0l42.886 42.881c35.535 35.523 35.535 93.141-.001 128.66zm-254.28 168.51-45.903 45.9c-11.845 11.846-31.064 11.817-42.881 0l-42.884-42.881c-11.845-11.821-11.845-31.041 0-42.886l128.65-128.65c11.819-11.814 31.069-11.814 42.884 0l42.886 42.886 42.876-42.886-42.876-42.881c-35.54-35.521-93.113-35.521-128.65 0l-128.65 128.64c-35.538 35.545-35.538 93.146 0 128.65l42.883 42.882c35.51 35.54 93.11 35.54 128.65 0l72.496-72.499c-23.956 1.597-48.092-3.784-69.474-16.283z\u0026#34;/\u0026gt; \u0026lt;/g\u0026gt; \u0026lt;/g\u0026gt; \u0026lt;/g\u0026gt; \u0026lt;/symbol\u0026gt; カテゴリーを追加する 本テーマでは、タグは自動で出てきますが、カテゴリーは出てきません。\n必要があれば下記の設定をしていきます。\n設定ファイルに追加 config.toml に tag の行があるので、その前後に category を入れます。\n右側に入るのは複数形になるので注意！！\n[taxonomies] tag = \u0026#34;tags\u0026#34; category = \u0026#34;categories\u0026#34; # ここに追加しました メニューに追加 before: after: これも設定ファイル config.toml の中です。\n[menu] というセクションがありますので、表示したい位置に入れてあげます。\n[menu] ＜中略＞ [[menu.nav]] name = \u0026#34;Categories\u0026#34; # 表示される名称 url = \u0026#34;/categories/\u0026#34; # 参照するアドレス weight = 3 # 表示する順番？ ＜中略＞ ついでに about も要らないので消しました。\n記事のタイトル下に追加 before: after: 記事を表示するテンプレートを修正します。\nthemes\\cupper-hugo-theme\\layouts\\post\\single.html\n↓ にコピーします。\nlayouts\\post\\single.html\nファイルを開くと、{{ with .Params.tags }} ～ {{ end }} という、タグ情報を表示する部分があります。\n丸ごとコピーして、tags を categories に変更して貼り付ければおしまい。\nスタイルは同じで良いかなと思ったので、手を抜いてそのままにしました。\n\u0026lt;div class=\u0026#34;date\u0026#34;\u0026gt; {{ $dateFormat := $.Site.Params.dateFormat | default \u0026#34;2006-01-02\u0026#34; }} \u0026lt;strong aria-hidden=\u0026#34;true\u0026#34;\u0026gt;Post: \u0026lt;/strong\u0026gt;{{ .PublishDate.Format $dateFormat }} \u0026lt;/div\u0026gt; \u0026lt;!-- ここから下を追加 --\u0026gt; {{ with .Params.categories }} \u0026lt;div class=\u0026#34;tags\u0026#34;\u0026gt; \u0026lt;strong aria-hidden=\u0026#34;true\u0026#34;\u0026gt;Categories: \u0026lt;/strong\u0026gt; \u0026lt;ul aria-label=\u0026#34;tags\u0026#34;\u0026gt; {{ range . }} \u0026lt;li\u0026gt; {{ $href := print (\u0026#34;categories/\u0026#34; | absLangURL) (. | urlize) \u0026#34;/\u0026#34; }} \u0026lt;a href=\u0026#34;{{ $href }}\u0026#34;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;!-- ここまで --\u0026gt; 更新日を追加する このテーマも更新日がないので追加します。\n設定の有効化 config.toml に以下を追加します。\nenableGitInfo = true 記事一覧に追加 before: after: 記事一覧を表示するテンプレートを修正します。\nthemes\\cupper-hugo-theme\\layouts\\_default\\list.html\n↓ にコピーします。\nlayouts\\_default\\list.html\n公開日の下に / Up: {{ .Lastmod.Format \u0026quot;2006-01-02\u0026quot; }} を追加します。\n日付のフォーマットも自分好みに変えておきました。\n{{ $dateFormat := $.Site.Params.dateFormat | default \u0026#34;2006-01-02\u0026#34; }} Post: {{ .PublishDate.Format $dateFormat }} / Up: {{ .Lastmod.Format \u0026#34;2006-01-02\u0026#34; }} \u0026lt;!-- ここに追加 --\u0026gt; 記事のタイトル下に追加 layouts\\post\\single.html を修正しますが、上とまったく同じなので省略。\n記事の概要を表示する 日付の下に書いてある文章が概要です。\nafter: 記事に概要を書く（下準備） 記事 hoge.md に以下を追加します。\ndescription: \u0026#34;ここに記事の概要を書きます。\u0026#34; テンプレート（例えば archetypes\\post.md ）に予め description: \u0026quot;\u0026quot; を追加しておくと、毎回書かなくて良いので楽です。\n記事一覧に概要を追加 layouts\\_default\\list.html\n表示したい場所に下記を追加します。\n{{ if (isset .Params \u0026#34;description\u0026#34;) }}{{ index .Params \u0026#34;description\u0026#34; }}{{ else }}{{ .Summary }}{{ end }} トップページを記事一覧ページにする［2019-03-19］ テーマ内にある _index.html を削除すると、次に見に行くのが list.html になるので、それで完了・・・のはずが、うまくいかず。\n最終的には 姑息な手段 で、layouts\\_default\\list.html をコピーして layouts\\_index.html としました。\nたぶん、どっか見落としているんだろうけど、とりあえず出来た（笑）\n","date":"2019-03-12T16:02:29+09:00","image":"https://k-kaz-git.github.io/images/cupper-org-logo.png","permalink":"https://k-kaz-git.github.io/p/%E3%83%86%E3%83%BC%E3%83%9E-cupper-%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA/","title":"テーマ Cupper のカスタマイズ"},{"content":"Shortcodes って何？ Hugo では、簡潔に Markdown が書けるように、Shortcodes というものが用意されています。\n記事中でよく使う表現なんかを、別ファイルとして HTML で用意しておき、必要に応じて呼び出す感じ。\nHugo 本体で用意されているもの、各テーマの中に用意されているもの、自分で用意するもの（自作）の3つがあります。\n他のテーマで気に入った Shortcodes があれば、それを別テーマに移植するのも手。\nスタイルシートが絡みますので、ちょっとした編集は必要になります。\nたまに、画像も使っていたりするので、それも見落とさずに必要があれば持っていきましょう。\nテーマ内の Shortcodes はとても勉強になるので、よく眺めておきましょう（笑）\nちなみに置き場所は下記の通りです。\nテーマの Shortcodes\n/theme/hoge-theme/layouts/shortcodes/\n自作の Shortcodes\n/layouts/shortcodes\n使い方 基本形 ごく標準的な書き方。\n※Markdown でショートコードを書くと、バッククォートで囲んでも実行しちゃう・・・。ということで、gist を利用。この gist 読み込みも Shortcodes で行っています。\n※% のところは、前を \u0026lt; で、後ろを \u0026gt; でも良いみたいです。\nショートコード名は、別途用意している HTML のファイル名（拡張子の .html を除いたもの）になり、これを読み込み、実行します。\n例えば、red.html というファイルに下記が記述されていたとします。\n\u0026lt;span style=\u0026#34;color:red;\u0026#34;\u0026gt;赤い字ですよ。\u0026lt;/span\u0026gt; Markdown の記事で、\nと書きますと、\n赤い字ですよ。\nが出力されます。\n変数を使う また、{{.Get 0}} という変数を使って、値の代入も可能です。\ncolor.html というファイルに下記が記述されていた場合、\n\u0026lt;span sytle=\u0026#34;color:{{.Get 0}};\u0026#34;\u0026gt;文字の色を変えます。\u0026lt;/span\u0026gt; Markdown の記事で、\nと書けば、{{.Get 0}} に blue が代入されて\n\u0026lt;span style=\u0026#34;color:blue;\u0026#34;\u0026gt;文字の色を変えます。\u0026lt;/span\u0026gt; 文字の色を変えます。\nというように。\nパラメーターは複数指定できますので、{{.Get 0}} {{.Get 1}} というように、数字を増やしていけばいくつでも対応できます。\n変数を分かりやすく文字にする 数字だけだと数が増えた時にゴチャゴチャとしますので、分かりやすいように文字指定にするほうが良いかもしれません。\n{{.Get \u0026quot;src\u0026quot;}} {{.Get \u0026quot;title\u0026quot;}} で、それぞれの値を取得することができます。\n開始タグと終了タグを入れる 元となる文章「何かしらの文字列」の前後に開始タグと終了タグを入れる場合はこのようにします。\nhtml側では、「何かしらの文字列」を取得するため {{.Inner}} を使い、下記のように記述します。\n\u0026lt;span style=\u0026#34;color:red\u0026#34;\u0026gt;{{.Inner}}\u0026lt;/span\u0026gt; 特定の文字列を置換する Netlify のほうで使っているテーマ Cupper の中に、特定の文字列を置換する Shortcodes がありました。\n使う機会もありそうなので、こちらに書いておきます。\n概要 [[[ と ]]] で挟まれた文字列に対して、ハイライトを付けるという Shortcodes です。\n[[[ という文字列を \u0026lt;span class='highlight'\u0026gt; に置換し、\n]]] という文字列を \u0026lt;/span\u0026gt; に置換します。\nhtml の書き方 {{ $code := .Inner | htmlEscape }} {{ $code := replace $code \u0026#34;[[[\u0026#34; \u0026#34;\u0026lt;span class=\u0026#39;highlight\u0026#39;\u0026gt;\u0026#34; }} {{ $code := replace $code \u0026#34;]]]\u0026#34; \u0026#34;\u0026lt;/span\u0026gt;\u0026#34; }} 行数 内容 1行目 {{.Inner}} で範囲指定した文字列を読み込んで、$code に代入します。 2行目 $code を読み込み、[[[ という文字列があれば \u0026lt;span class='highlight'\u0026gt; に置換し、再度 $code に代入します。 3行目 $code を読み込み、]]] という文字列があれば \u0026lt;/span\u0026gt; に置換し、再度 $code に代入します。 記事の書き方 こんな感じで。\n結果 何かしらの\u0026lt;span class=\u0026#39;highlight\u0026#39;\u0026gt;文字列\u0026lt;/span\u0026gt;です。 これくらい覚えておけば、ある程度自作も出来そうですね。\nまた何かあれば追記します。\nちなみに、Youtube や Instagram の埋め込みについても、Hugo 標準の Shortcodes で、出来るようになっています。\nShortcodes用のHTMlについて Shortcodes で利用する html の記述方法は紹介しましたが、ちょっとアレンジしたものを紹介します。\nif文（条件分岐） 本文から受け取った値によって、1つの html 内で出力方法を変化させる方法です。\n実際に行ったケース。\nテキストの文字色を変化させる Shortcodes で、内容によって改行するものと、改行しないものを用意したくなりました。\n改行するもの → 段落要素（p） 改行しないもの → 行内コンテナ（span） Shortcodes での記述はこちら。\n上の type=\u0026ldquo;p\u0026rdquo; が段落で、下の type=\u0026ldquo;s\u0026rdquo; が行内となります。\nfr という html ファイルを読み込んでいます。その中身はこちらです。\n{{- $han := .Get \u0026#34;type\u0026#34; -}} {{ if $han | eq \u0026#34;p\u0026#34;}} \u0026lt;p class=\u0026#34;fr\u0026#34; style=\u0026#34;font-size: {{.Get \u0026#34;size\u0026#34;}}%;\u0026#34;\u0026gt;{{.Get \u0026#34;text\u0026#34;}}\u0026lt;/p\u0026gt; {{ else if $han | eq \u0026#34;s\u0026#34;}} \u0026lt;span class=\u0026#34;fr\u0026#34; style=\u0026#34;font-size: {{.Get \u0026#34;size\u0026#34;}}%;\u0026#34;\u0026gt;{{.Get \u0026#34;text\u0026#34;}}\u0026lt;/span\u0026gt; {{ end }} ちょっと解説。\n{{- $han := .Get \u0026#34;type\u0026#34; -}} $han という変数に本文中から引っ張ってきた type の中身を代入します。\n{{ if $han | eq \u0026#34;p\u0026#34;}} \u0026lt;p class=\u0026#34;fr\u0026#34; style=\u0026#34;font-size: {{.Get \u0026#34;size\u0026#34;}}%;\u0026#34;\u0026gt;{{.Get \u0026#34;text\u0026#34;}}\u0026lt;/p\u0026gt; {{ else if $han | eq \u0026#34;s\u0026#34;}} \u0026lt;span class=\u0026#34;fr\u0026#34; style=\u0026#34;font-size: {{.Get \u0026#34;size\u0026#34;}}%;\u0026#34;\u0026gt;{{.Get \u0026#34;text\u0026#34;}}\u0026lt;/span\u0026gt; {{ end }} $han の中身が \u0026ldquo;p\u0026rdquo; だったら、\u0026lt;p class ... の行を実行します。\n$han の中身が \u0026ldquo;s\u0026rdquo; だったら、\u0026lt;span ... の行を実行します。\neq というのは比較したものが 同じ という意味です。\n","date":"2019-03-11T17:40:19+09:00","image":"https://k-kaz-git.github.io/images/computer-Programming_640.webp","permalink":"https://k-kaz-git.github.io/p/hugo-%E3%81%AE-shortcodes-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B/","title":"Hugo の Shortcodes を使ってみる。"},{"content":"ファビコンって？ ブラウザでサイトを開いた時に、タブに表示される小さなアイコンです。\n他にもブックマークとして保存したり、デスクトップにショートカットを作ったりするときにも使用されます。\nうちのサイトだとこういうの。\n昔は、1個だけ用意しておけば良かったんですけどね。\n今は、Windows、Mac、Android、ブラウザの違い等で、複数サイズや種類を用意する必要があります。\n正直、どんなサイズや種類を用意すれば良いのか分からなくなっています（笑）\nそして、いくつも準備するのって面倒ですよね。\nファビコンを作るサービスを使いましょう ありがたいことに、基本となる画像ファイル1個だけあれば、あとはほぼお任せでファビコンを作ってくれるサイトがあります。\nFavicon Generator. For all platforms\n作成手順 Favicon Generator. For all platforms に行きます。 「Select your Favicon picture」というボタンをクリックします。 ファビコンとしたい画像を選択してアップします。 OS や ブラウザごとにいくつか設定がありますので、自分好みにします。 「Generate your Favicons and HTML code」というボタンをクリックします。 作成されたファビコン（zip形式）をダウンロードして完了です。 zip を解凍すると各種ファビコンがありますので、あとはうまいことお使い下さい。\nまた、リンク指定の仕方などもサイトに表示されていますので、参考に。\n","date":"2019-03-10T06:37:26+09:00","image":"https://k-kaz-git.github.io/images/icon-sns_640.webp","permalink":"https://k-kaz-git.github.io/p/%E3%83%95%E3%82%A1%E3%83%93%E3%82%B3%E3%83%B3%E3%82%92%E4%BD%9C%E3%82%8B%E3%82%88/","title":"ファビコンを作るよ。"},{"content":"追記 2024-02-07 もう5年も前の記事なんですね。時が経つのは早いです。\nHugoのバージョンを上げたので、Netlifyで指定しているHugoのバージョンも変えとかなきゃと設定を見たんですが、項目が無くなっていました。\n今ではバージョン指定しなくて良いのかもしれません。（試さず書いちゃうけど）\n今は設定のBuild \u0026amp; deployにあるBuild Settingsが該当項目みたいですが、Build commandを「hugo」、Publish directoryを「public」にすれば良いみたい。\n一応、ドキュメントがありましたので置いておきます。\nFramework integrations | Netlify Docs\nということで、以下の記事は古いですよということを言いたかった。\nHugo を Netlify で動かす ネットでは簡単に出来ると書いてありましたけど、けっこうハマったので、そのあたりも書こうと思います。\n結論としては、動きました。\nk-kaz が好きなことをするサイト\nまずは Hugo をゲットする ダウンロード 公式サイトから、OSにあった最新版を落としてきてください。\nSass を使いたい場合は extended版 が必要になりますが、ここでは普通のタイプで良いです。\n※理由は後ほど・・・\nReleases gohugoio/hugo\nパスを通す 解凍したら、どこに居ても、Hugo を実行できるようにするため、パスを通します。\nやり方は・・・簡単なのでネットでご覧ください。\nWindows の場合は、環境変数のところを弄ります。\nローカルサイトを用意する サイトの雛形を展開する 今後、作業をする場所に移動して、下記コマンドを実行します。\nhugo new site hoge-site\nhoge-site というディレクトリができて、その中に必要なファイルが展開されます。\nテーマの準備 テーマサイトから好きなテーマを選択します。\nHugo Themes\nテーマを選ぶと、その中にインストール（ダウンロード）の仕方が書かれていますので、それに従います。\nちなみに私の選んだ aether で説明しますと、\ngit clone https://github.com/josephhutch/aether.git themes/aether\nこれを実行することでダウンロードしてくれます。\nテーマのダウンロードは、テーマフォルダに移動してからコマンドを実行するパターンが多いです。\nただ、このテーマはルートで実行するようにコマンド指定されていますのでご注意ください。\n※themes/aether とダウンロード先を指定しているので、テーマ内で実行すると themes/themes/aether となり、重複してハマります。そして気付きにくい。\nテーマ内の .git を削除 テーマの中に .git というフォルダがあります。\nあとで面倒なので、削除します。\n補足［2019-03-10］ 他のテーマを使ったときに気付いたんですが、サブモジュール化すれば削除しなくて良いみたいです。\nというか、そのほうが良いみたいですね。テーマのアップデートできるし。\n別テーマですけど、こんな感じです。\ngit submodule add https://github.com/zwbetz-gh/cupper-hugo-theme.git themes/cupper-hugo-theme git submodule update --remote --merge 設定ファイルの修正 ルートにある config.toml が設定ファイルです。\nエディタで開いて、最低限これらを書いてください。\nbaseURL はあとで、実際の公開アドレスに直せばよいです。\nbaseURL = \u0026#34;https://hoge/\u0026#34; languageCode = \u0026#34;ja\u0026#34; title = \u0026#34;k-kaz\u0026#34; theme = \u0026#34;aether\u0026#34; サイトを確認する まずはローカルで確認する ローカルサイトのルートで下記を実行します。\nhugo server -D\nブラウザで localhost:1313 にアクセスすると、テーマと同じ画面（記事無し）が出てきます。\n実行時にエラーになったり、ブラウザで表示しないときは何かが間違っています。\nGitHub の準備 GitHub でリポジトリを作る GitHub にログインして、右上にある \u0026ldquo;＋\u0026rdquo; をクリックし、「New repository」を選びます。\nRepository name ：好きな名前を付けてください。 Description ：好きに書いてください。（空欄でも可） Public/Private ：お好きな方に。 README ：作らなくて良いです。 GitHub Pages は、Public しか選べませんが、Netlify は Private も選べます。\n私はせっかくなので、Private としました。\nリモートリポジトリとローカルリポジトリを繋げる リポジトリ作成後に出てくる画面で、2番目にあるものを実行しますが、ちょっと注意。\nいきなり実行すると、リポジトリが無いですよと怒られます。\n最初にこちらを実行してください。\ngit init\nイニシャライズをします。\nこれをすると、.git というフォルダが作成されます。\n※さっき、テーマで消したアレだ！\nその後、画面に出ていたコマンド＋アルファを実行します。\ngit remote add origin https://github.com/hoge.git\ngit add .\ngit commit -m \u0026quot;First Commit\u0026quot;\ngit push -u origin master\n尚、ssh接続が可能になっている場合は、\ngit remote add origin git@github.com:hoge.git\nとなります。\nこれでリポジトリが繋がり、ローカルにあったファイルがすべて GitHub に反映されたと思います。（空フォルダは反映しないっぽい）\nNetlify いよいよきました。\nNetlify にログインする 新しくアカウントを作ってもよし、GitHub やその他のサービス経由にしてもよし。\n設定をするんですが・・・ GitHub と連携し、どのリポジトリを使うか設定します。\n先程用意したリポジトリを選択しましょう。\nあとは自動的にビルドして公開できます・・・のはずが、ここから苦難の道のり（笑）\nあまりに苦戦したため、細かい手順は忘れました・・・。\nでも、ローカルサーバーで動いていて、下記のハマりどころだけ注意すれば、大丈夫だと思います。\n私はそのハマりどころに、長い時間を盗まれました。\nハマりどころ いくつかの問題が絡んでいたので、解決するのに苦労しました。\n分かっちゃえばどうってことないんでしょうけどね。\nDeploy できないよー GitHub にアップしたのはソースの状態ですので、Netlify の中でビルドをして、ブラウザが認識できる形式にします。\nでも、ここでエラーが何度も出ました。\nバージョン指定 Hugo のどのバージョンでビルドするのか指定します。\n流れの中でこの設定画面が出なかったので、未指定のままビルドをして、ずっとハマっていました。\n設定箇所は、上部メニューの「Settings」 → 左メニューの「Build \u0026amp; deploy」 → 「Build environment variables」です。\nKey HUGO_VERSION\nValue 0.54.0\nと入れます。\n尚、普段は extended版 を使っているので、0.54.0/extended と指定しましたが、フリーズしました（笑）\nHugo の extended版 には暫定対応 ということです。\nもしも、extended版 を使いたい場合は、回避方法が用意されているので、ネットで検索してみてください。\n私は、そこまでして Sass に拘る必要がないので、素直に css でいくことにしました。\nテーマの問題 テーマが Sass を使っているケースがあります。\n気分を変えようと思って選択したテーマがそうでした・・・。\nエラーログのところにやたらとテーマの名前が出るので確認したらビンゴ。\n尚、aether は css なので大丈夫です。\nダウンロード前に分かれば良いんですけど、詳細ページに書かれていなければ落として確認するしかないのかな。\nテーマ内に assets というフォルダがあると、その中に Sass の .sass や .scss があるかと思います。\nその他 記事が表示されない ローカルでは表示されているのにアップしたら記事だけ表示されないとアタフタ。\nなんと下書きモードのままアップしていたのでした。\n※ローカルでは、下書きも表示するよう hugo server に -D のオプションを付けていた。\n記事の上部にある draft: true を draft: false にして、もう一度アップしましょう。\nこんな基本的なミスをするなんて。\nそして、基本的過ぎると、そこに気付くのが遅れますね（苦笑）\n","date":"2019-03-07T14:44:55+09:00","image":"https://k-kaz-git.github.io/images/hugo-netlify-network_640.webp","permalink":"https://k-kaz-git.github.io/p/hugo-%E3%82%92-netlify-%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%99%E3%82%88/","title":"Hugo を Netlify で動かすよ。"},{"content":"余談ですが、いつもお世話になっているサイト様 スタイルシートの記述で迷ったとき、こちらのサイトを参考にすることが多いです。\nいつもお世話になっております。\nサルワカ: HTML\u0026amp;CSS\nMDN: CSS リファレンス\nHugo で Sass を使ってみる。 本題へ。\n昨年、Hugo も Sass に対応したようですが、標準のモジュールでは使えず、extended版 が必要になります。\nHugo のバージョンを確認する。 hugo version で現在のバージョンが確認できます。\nhugo version Hugo Static Site Generator v0.54.0/extended hogehoge... extended の文字があった方はおめでとうございます。 無かった方はダウロードを行ってください。\nHugo の extended版 をダウンロードする。（必要あれば） extended版 では無かった方。\nこちらから、extended ってファイル名に付与されているものをダウンロードしてください。\n下のほうにあるはず。\nReleases · gohugoio/hugo\nダウンロード後、入れ替えをします。\nSass のファイルを用意する。 現在使っているスタイルシートで良いので、下記に配置します。\nまた、この後の作業をスムーズにするため、ファイル名も変更しています。\nサイト名\\assets\\sass\\main.scss\nassets\\sass がない場合は作っちゃってください。\nまた、Sass には .sass と .scss の2種類が存在しますが、元の css と互換性のある .scss としています。ここは好きな方にして良いですが、.sass の場合は、中身の編集もあわせてお願いします。\nスタイルシートを読み込む html の編集をする。 テーマによってファイルが異なると思いますが、ここでは aether の場合で書いていきます。\nサイト名\\layouts\\partials\\head.html を開きます。\nファイルが無い方は、テーマの中 テーマ名\\themes\\aether\\layouts\\partials\\head.html から、コピーして持ってきてください。\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ \u0026#34;css/main.min.css\u0026#34; | absURL}}\u0026#34; /\u0026gt; {{ $style := resources.Get \u0026#34;sass/main.scss\u0026#34; | toCSS | minify | fingerprint }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ $style.Permalink }}\u0026#34;\u0026gt; 1行目が元々入っている全体のスタイルシートの読み込み部分です。\n今回は2行目と3行目を追加します。\n2行目\n先程用意した main.scss を読み込み、パイプ | を使って、CSS 形式に変更したり、圧縮したりしています。\nパイプを使うと、どんどん右の作業工程へ材料を渡していけますので、1行だけでいくつかの加工が可能です。\n3行目\n2行目で加工したスタイルシートが $style に入っているので、それを通常通りの書式でスタイルシートとして読み込みます。\n※別途、スタイルシートを用意して読み込んでいた場合、置き換えるのであれば、その行を消してください。\nあとはお好きにスタイルシートを弄ってください。 以上で、Sass を使うための準備は完了です。\nミスっていると、hugo server でローカルサーバーを立ち上げたときに怒られます。\nちなみに私は、事前準備は出来ていましたが、スタイルシートの中身で怒られました。\nそれは次の項で。\n怒られたのは、main.scss の中身 ローカルサーバーを立ち上げたときに、エラーが出て起動しませんでした。\nメッセージには、ご丁寧に\nスタイルシートの読み込みでエラーがあった 何行目の何文字目がおかしい と書かれています。\n何か問題でも？ 該当する箇所の確認をすると、背景色の指定をしているところでした。\nbackground: rgb(230, 90, 90, 0.2); 何か問題でも？\nしばらく気付かなかったんですけど、落ち着いて見たらようやく答えが分かりました。\nというか、そもそもこの透過処理のことを私がよく分かっていなかったのが問題です。\nその前に、色の指定について 色の指定については、いくつかの方法があります。\n”赤” という色を表す場合、\nred #ff0000 rgb（255,0,0） こんな風に、何通りか指定方法があります。（実はまだ他にも・・・）\n今回の間違いは・・・ で、今回の件なんですけど、背景色を透過させたいということで指定をしています。\n透過させるときは、色指定に rgb を使ってあげるんです。\n通常は、rgb(red,green,blue) の三原色で指定するんですが、そのあとに alpha というチャネルが入り、ここで透過具合を数値で入れると反映されます。\n私もそこまでは知っていたんですけど、alpha が入るときに rgb が rgba になることを知らなかったんですね。\nということで、私の知識不足により、元々の .css からおかしかったというオチでした。\n下記のように書き直したところ、きちんとスタイルシートの変換がされ、サーバーが起動しました。\nbackground: rgba(230, 90, 90, 0.2); 同じ Sass だけど .sass か .scss か Sass と言っても、記述方式が2通りあり、好きなほうを使えます。\n.sass は、{} や ; が不要なので、すっきり、そして少ない文字数でコーディングが可能。\n.css から拡張されている、いくつかの機能はどちらも同様に使えます。\n.sass と .scss のどちらが良いのかというのは、ネット上でも議論されていますが、私の結論としては 「好きな方をどうぞ」 です。\nちなみに私は、.scss にしました。\n最初は .sass のほうが絶対に良いだろうと思って、.css を書き直していたんですけど、{} が無いと、どこからどこまでが今書いている範囲なのか、パッと分かりませんでした。\nということで、私の頭の都合で .scss を選んだ次第です。\nそのような制限がなければ .sass を選んでいたかな。\nまぁ、最終的にはどちらも .css に変換されますので、サイトの表示速度に有利なのはこちらだとか無いはず。（私の理解では・・・）\n","date":"2019-03-04T10:05:17+09:00","image":"https://k-kaz-git.github.io/images/computer-Programming_640.webp","permalink":"https://k-kaz-git.github.io/p/hugo-%E3%81%A7-sass-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B/","title":"Hugo で Sass を使ってみる"},{"content":"せっかくなので GitHub をもう少し活用できないかなと思いまして、こちらにやってみたことを書いていこうと思います。\n後日、同じことをやるときに 絶対忘れている という自信があるので、備忘録的に。\nGit コマンドのチートシート［2019-03-06］ 良いものを発見！！\nGit コマンドを、イラスト入りで分かりやすく作ってくださった方がいらっしゃいます。\nGit そのものが分かっていない初心者の私には、とてもありがたいです。\nGit でよく使われるコマンドにイラストによる説明を加えて1枚のチートシートにまとめてみた\n注意書きに「表現上、簡略化している部分がある」、「誤記による損害発生の責任は負いません」とあります。\nその点をご理解の上で、皆さんもご覧ください。\nssh接続【GitHub】 ssh接続用に、公開鍵と秘密鍵を作成します。\n出来上がった公開鍵の中身を GitHub に登録しておきます。\n参考：GitHubでssh接続する手順公開鍵・秘密鍵の生成から\nhttps 接続から、ssh 接続に切り替える $ git remote -v で表示されたアドレスが https://github.com/ の場合は、git@github.com: に変えることで ssh 接続にできます。これで、毎回、ユーザー名とパスワードを聞かれなくなります。\n切替用コマンド $ git remote set-url origin git@github.com:hogehoge.git\n確認用コマンド $ ssh -T github\n各種設定ファイルの共通化 Linux と Windows で共通して使うアプリが多く、その設定をそれぞれで行うのも面倒だし、間違えることもあるので、設定ファイルを使い回すようにしたいのです。\nGoogleDrive、DropBox、OneDrive 等々に、コピーした設定ファイルを保存して、相手先で取り出して上書きするっていうのがこれまでのやり方なんですが、何度も設定変更を行うようなものだと、嫌になります。\nそこで GitHub GitHub を使えば、push と pull するだけでファイルの行き来ができる。\nさらにバージョン管理まで出来ちゃうじゃないか。\nやり方 いくつか作業が続きます。\nシンボリックリンクの作成 フォルダ及びファイルの置き場所を、本来ある場所から、GitHub で管理する場所に変更します。\nこれを Linux と Windows 両方やっておけば、いつでも最新で同じ内容の設定ファイルが使えます。\n※push と pull を忘れないように。\nLinux なら ln コマンドで。\nWindows なら mklink コマンドで。\nWindows でちょっとハマった。\nWin10 の PowerShell では、直接 mklink が実行できないんです。\ncmd /c mklink というようにすると動きます。\n※mklink は、cmd の中にあるコマンドのため\nリモートリポジトリの作成 GitHub でリモートリポジトリを作成します。 私は web で行い、Private モードとしておきました。（最近、無料ユーザーでも Private を使えるようになった）\nローカルリポジトリの作成 ここから先は、私が苦手な（よく分かっていない）ところです。\nまず、リポジトリとするディレクトリに移動しておきます。\ngit init\ngit add .\ngit commit -m \u0026quot;コメント\u0026quot;\nリモートリポジトリへプッシュ git remote add origin git@github.com:ユーザー名/リモートリポジトリ名.git\n※最後の .git を忘れがちなので注意\n※git@github.com にしているのは ssh で接続するため git push -u origin master\n相手側で、リモートリポジトリからのデータ取得 初回のみ、クローンで丸々ゲットしてきます。\ngit clone git@github.com:ユーザー名/リモートリポジトリ名.git 展開するディレクトリ\nそれ以降は、git pull でOKです。\nよし、いろいろなデータをバージョン管理してみようではないか。\nHugo で使っているローカルリポジトリの場所を変更 設定ファイルを1ヶ所にまとめていくうちに、Hugo で作ったサイトのリポジトリも同じところに移動したくなったので、心配もあるけどやってみます。\nやり方 リポジトリを起きたい場所に移動して、\ngit clone git@github.com:ユーザー名/リポジトリ名 変更先ディレクトリ\nhugo server を実行したときに元の場所を見に行かないか心配しましたが、変更先ディレクトリ の中で実行すれば、Hugo はその中を見に行くようです。\n特に Hugo の設定ファイルを弄るとか必要はありませんでした。\n結果から見れば、超簡単な作業でした。\nローカルでいろいろ弄ったけど、元の状態に戻したい[2023-04-19] あれこれ作業をしていたけれど、「これまでやった作業を元に戻したい・・・」と悲観したときの戻し方です。\nやり方 git checkout . で元通り！\n特定のファイルだけ戻すならgit checkout \u0026lt;filename\u0026gt;です。\nプッシュしたけど、1つ前の内容に戻したい［2019-02-25］ リモートリポジトリにプッシュしたあと、「あっ、やっぱり前のほうが良かった」と思ったときの手順です。\nネットで調べたら、間違えたものも履歴として残す方法もありましたが、個人で使う分にはゴミになるだろうと思いまして、シンプルに「先程プッシュしたものは、無かったことにする」という方法を採用します。\nやり方 プッシュしたディレクトリに移動して、\ngit reset --hard HEAD^ をして、\ngit push -f origin master です。\n上記は、あくまでも個人ユースの場合に使うコマンドのようです。\nチームで管理しているときは、別の方法をとってください。\n（未熟な私にはまだ分からないけど）\nリポジトリから除外したいファイルやフォルダがある［2019-02-26］ VSCode の設定ファイルをリポジトリに入れて共通使用としたんですけど、不要なファイルもあるんですよね。\nタブの状態（何のファイルを開いているか）は要らないし、というか、ファイルの置き場や所有しているファイルも違うし・・・。\nやり方 .gitignore に除外するものを書きますよ git を実行するディレクトリに .gitignore というテキストファイルを用意します。\nこの中にリポジトリから除外するファイルやフォルダを書き込むと、そのあたりを考慮してリポジトリを作成してくれます。\nVSCode で不要なディレクトリを書き込みました。\n[.gitignore] VSCode/User/globalStorage/ VSCode/User/workspaceStorage/ すでにリポジトリが出来上がっている場合 git から情報を消し、改めて add → commit → push します。\ngit rm -r --cached .\ngit add .\ngit commit -m \u0026quot;コメント\u0026quot;\ngit push origin master\n相手側はどうすればいいのかな。\n普通に git pull でやっても怒られたので、ディレクトリ毎、まっさらにして\ngit clone git@github:ユーザー名/リポジトリ名.git\nで、解決したことにしちゃった（笑）\nVSCode の設定ファイルを共通で使う［2019-02-28］ 上のほうにやり方を長々と書きましたけど、プラグインがあるらしいぞ。\nVSCode(Visual Studio Code)の設定を同期させる拡張機能「Setting Sync」が便利\n","date":"2019-02-22T15:49:24+09:00","image":"https://k-kaz-git.github.io/images/network-server_640.webp","permalink":"https://k-kaz-git.github.io/p/git%E3%81%A8github%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B/","title":"GitとGitHubを使ってみる"},{"content":"スニペットがあるじゃないか。 完全に頭から抜け落ちていました。\n今使っているエディタ Visual Studio Code（以下、VSCode）には スニペット が機能として搭載されています。\nスニペット（英語: snippet）とは、「断片」という意味である。情報処理の分野ではよく使う短いプログラムコードを統合開発環境から呼び出す機能の事である。また、呼び出される短いコードの事をスニペットと呼ぶ場合もある。 Wikipediaより。\nこんな感じのものです。 Markdown でスニペットを使いたい なんか初期状態ではスニペットが有効になっていないんですよね。\n設定の中に沢山項目があって、そのどれかを有効にすれば良いのかもと思いつつ、面倒なので設定ファイル settings.json に直接書き込んでいます。\nsettings.json に有効化のための記述を追加 設定ファイルの保存先が、環境（OS）によって違うので、下記の方法が一番楽チンな気がする。\nファイル → 基本設定 → 設定 → 拡張機能 → settings.json で編集 を選択。\n拡張機能のところは選ばなくても良いんですが、これを選ぶとすぐに settings.json が沢山出てくるのでそうしています。\nファイルを開いたら、以下を追加しています。\n元々 ｛｝ があるので、その中に入れるようにすると正しく認識してくれます。\n[settings.json] { \u0026#34;[markdown]\u0026#34;: { \u0026#34;editor.wordWrap\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;editor.quickSuggestions\u0026#34;: true, \u0026#34;editor.snippetSuggestions\u0026#34;: \u0026#34;top\u0026#34; } } スニペットを登録する Markdown用のスニペットを登録します。\n設定用ファイル Markdown.json を開く Markdown.json というファイルに追記していきます。\nファイル → 基本設定 → ユーザースニペット → Markdown.json を選択。\nファイルが開かれるとこんな感じで、サンプルがコメントアウトした状態になっています。\n［Markdown.json］ { // Place your snippets for markdown here. Each snippet is defined under a snippet name and has a prefix, body and // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are: // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the // same ids are connected. // Example: // \u0026#34;Print to console\u0026#34;: { // \u0026#34;prefix\u0026#34;: \u0026#34;log\u0026#34;, // \u0026#34;body\u0026#34;: [ // \u0026#34;console.log(\u0026#39;$1\u0026#39;);\u0026#34;, // \u0026#34;$2\u0026#34; // ], // \u0026#34;description\u0026#34;: \u0026#34;Log output to console\u0026#34; // } } サンプルは残しても消しても結構ですが、最初と最後の {} は、残してください。\n尚、ここに書かれているサンプルの意味が理解できなくて、ちょっと迷いました。（英語にとことん弱い人）\n標準的なスニペットの登録方法 \u0026#34;スニペット名\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;キーになる文字列\u0026#34;, \u0026#34;body\u0026#34;:[ \u0026#34;呼び出される文字列\u0026#34; ], \u0026#34;description\u0026#34;: \u0026#34;このスニペットの説明文\u0026#34; } スニペット名\n重複しなければ自由に付けて大丈夫です。\nキーになる文字列\nこの文字列を入力（途中でも）することでスニペットが起動します。\n呼び出される文字列\n上記、キーになる文字列をこちらの文字列で置き換えます。\nこのスニペットの説明文\nスニペットの候補とともにこの説明文が表示されるので、分かりやすいコメントを書いておきましょう。\n例えば、下記のように登録したとします。\n\u0026#34;insart image\u0026#34;:{ \u0026#34;prefix\u0026#34;: \u0026#34;img\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;![hoge のイメージ画像](/images/hoge.webp)\u0026#34; ], \u0026#34;description: \u0026#34;画像を挿入する\u0026#34; } そうすると、Markdown での記述の際に\nimg と打った時点（もしくは i を入れた時点）で、上記のスニペットが画面に登場し、Enter or TAB を押すことで置き換わります。\n候補が複数出て、2行目以降を選択したいときは、カーソルキーで選択してください。\n日本語の変換候補と似た感じです。\n一歩進んだスニペットの登録方法 先程の登録だと、ベタ打ちというか決め打ちというか、登録したものを呼び出して終わりでした。いつも使うバナーを呼び出すとかなら OK ですね。\nただ、実際にコードを書いていくにあたっては、呼び出したものを修正したいという場面が多々あります。\nそんなときは $1 や $2 を使用します。\n先程と違うのは、\u0026quot;body\u0026quot; の中だけです。\n\u0026#34;insart image\u0026#34;:{ \u0026#34;prefix\u0026#34;: \u0026#34;img\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;![$1 のイメージ画像](/images/$2.webp)\u0026#34; ], \u0026#34;description: \u0026#34;画像を挿入する\u0026#34; } こんな感じになります。\n”のイメージ画像” は固定ですが、その前は毎回違うという場合。\n上記のように $1 を入れてあげると、呼び出し後に $1 の部分にカーソルが挿入されるため、そのまま文字列の入力が可能です。\nさらに、TAB を押すことで $2 にカーソルが移動するので、画像のファイル名を入れることができると。\n便利になってきましたね。\nもう一歩進んだスニペットの登録方法 先程のにちょっと工夫をすると、分かりやすさをプラスすることができます。\n私のように Markdown が頭に入っていない人向け・・・かもしれません。\nこちらも \u0026quot;body\u0026quot; の中だけが変わっています。\n\u0026#34;insart image\u0026#34;:{ \u0026#34;prefix\u0026#34;: \u0026#34;img\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;![${1:画像のタイトル} のイメージ画像](/images/${2:ファイル名}.webp)\u0026#34; ], \u0026#34;description: \u0026#34;画像を挿入する\u0026#34; } はい、少しややこしくなりました（笑）\n動作そのものは先程と同じですが、表示の仕方が変わります。\nとりあえず、画面をみていただきましょう。\nお分かりになりましたか。\n${1:hoge} という書き方をすると、$1 としてカーソルが入る部分に、hoge という文字列を仮表示してくれます。\n上記の場合は、${1:画像のタイトル} ですので、$1 のところに 画像のタイトル という文字列が仮表示されていて、何かしらの文字を入力すると消えてくれます。\nこうしておけば、そこに何を書けば良いのかが一目瞭然。しかも、勝手に消えてくれるので、自分で削除する手間も要りません。\n一番最初の標準的なスニペットから、少しだけ手を入れる必要がありますが、それ以上に見返りは大きいので、是非お試しください。\nスニペットの使い方 すでにここまでのところで書いてしまったので、省略（笑）\nMarkdown の形式が選択されている状態（ウィンドウの右下に出ています）で、登録したスニペットのキーとなる文字列を入力して、候補から選択してください。\n注意点 ちょっとした注意点を書いておきます。\nスニペットの複数登録 スニペットを複数登録する際は、1スニペット毎に最後の } を }, としてください。\n1スニペット毎にカンマで区切る必要があります。\nダブルクォーテーション（ \u0026ldquo;）の使用 HTML で記述する際に、\u0026quot; を使う場面が多々あります。\nclass=\u0026quot;\u0026quot; とか style=\u0026quot;\u0026quot; とか。\nスニペットの body 部分で \u0026quot; は、文字列の範囲を決めるという特殊な意味を持ち、そのまま記述すると、そちらの意味に取られちゃって、意図した動作となりません。\nHTML の中で使いたい場合は \u0026quot; の前に \\ を付けて下さい。そうすることで、特殊な意味を持ったものではないと否定できます。\n実際に書くと class=\\\u0026quot;\\\u0026quot; みたいな感じです。\nbody が複数行になる場合 ＆ タブを入れたい場合［2019-03-04］ 複数行の場合は、1行ごと最後に , を入れます。\n但し、最終行は不要で、] の後に , を入れます。\n\u0026#34;comment\u0026#34;:{ \u0026#34;prefix\u0026#34;: \u0026#34;comment\u0026#34;, \u0026#34;body\u0026#34;:[ \u0026#34;/* ========================================\u0026#34;, \u0026#34;\\t\\t${1:comment}\u0026#34;, \u0026#34;======================================== */\u0026#34; ], \u0026#34;description\u0026#34;: \u0026#34;コメントアウト タイトル\u0026#34; } また、タブは \\t で表します。\n上記例の場合は、タブが2つ入る形です。\n","date":"2019-02-22T08:44:41+09:00","image":"https://k-kaz-git.github.io/images/women-jump-happy_640.webp","permalink":"https://k-kaz-git.github.io/p/vscode-%E3%81%AE%E3%82%B9%E3%83%8B%E3%83%9A%E3%83%83%E3%83%88%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B/","title":"VSCode のスニペットを使ってみる"},{"content":"はじめに Markdown には、基本となるものから、機能拡張されたものまであり、使用する環境によって微妙に使えるコマンド、使えないコマンドがあるようです。\nこの前、外部リンクを開くための記述をネットで探して入れてみましたが、残念ながらココでは動かず・・・。\nということで、Hugo で使える Markdown を、自分のためにまとめておきます。\nMarkdown の中で HTML を書いちゃえばなんとでもなりますが（笑）\nHugo で使える Markdown 記法 普段、よく使うものだけ。\n正式な記法であったり、もっと辞書的なものをお求めの方は、Google先生にお尋ねください。m(_ _)m\n見出し（h） # の数で h1 ～ h5 を表し、その右に見出しの文字列。\n# 見出し（h1） ## 見出し（h2） ### 見出し（h3） #### 見出し（h4） ##### 見出し（h5） 改行（br） 行末にスペースを2つ付けます。\n見えませんけど、想像してください（笑）\n実際に改行していなくても、スペース2つが間に入っていれば、続けて書いていてもそこで改行されます。まぁ、\u0026lt;br\u0026gt; と同じです。\n改行前の文章 改行後の文章\r強調（strong） ** で文字列を挟む。\n** hoge **\r画像挿入（img） タイトルは省略可能。\n![代替えテキスト](/iamges/hoge.webp)\r![代替えテキスト](/iamges/hoge.webp \u0026quot;タイトル\u0026quot;)\rリンク（a href） 残念ながら、target は指定できない。\nどうしてもやりたい場合は、HTML で書く。\nテキストリンク タイトルは省略可能。\n[hoge](https://hoge.com)\r[hoge](https://hoge.com \u0026quot;タイトル\u0026quot;)\r画像リンク タイトルは省略可能。\n[![代替えテキスト](/iamges/hoge.webp \u0026quot;タイトル\u0026quot;)](https://hoge.com)\r[![代替えテキスト](/iamges/hoge.webp)](https://hoge.com)\rコード（code） 文中に差し込むコードは ` （バッククォート）で挟む。\n文字列 `コード` 文字列\r整形済みテキスト（pre） 単純にコードを記述する場合は、タブで行頭を開ける。\nコードの前後にあたる行は空行でないとうまく読み取れないことあり。\nまた、特定のフォーマットでシンタックスハイライトを付ける場合は、```html とかにする。\nhtmlの部分は、php、md・・・いろいろ入れられるので、ケースに合わせて使用する。\n[hoge](https://hoge.com)\r[hoge](https://hoge.com)\r水平線（hr） *** もしくは --- で水平線が書けます。\n前後に文字列が入ってはいけません。\n***\r取り消し線（s） ~~ で取り消す文字列を挟みます。\n~~取り消す文字列~~\rWordPress でも使えるよ［2019-03-06］ 余談ですが・・・。\nWordPress 5.0 でお目見えしたブロックエディタ（旧呼称 Gutenberg）は、Markdown に対応しています。 エディタで書いてから、ブロックエディタに貼り付けるとうまい具合に変換してくれました。\n注意点 VSCode のように、Markdown の書式にあわせて文字色を変えてくれる優秀なエディタの場合、コピーした際にその情報まで持っていってしまい、うまく反映ができません。\n面倒ですが、以下のような方法をとってください。\nMarkdownモードで作成 → テキストモード or メモ帳 に貼り付け＆コピー → ブロックエディタに貼り付け 最初からテキストモード or メモ帳みたいなシンプル機能のエディタを使う またよく使うものが出てきたら追記します。\nここに分かりやすく書いてあった。\nMarkdown Cheatsheet\n","date":"2019-02-21T11:43:14+09:00","image":"https://k-kaz-git.github.io/images/computer-Programming_640.webp","permalink":"https://k-kaz-git.github.io/p/hugo-%E3%81%A7%E4%BD%BF%E3%81%88%E3%82%8B-markdown-%E3%81%AE%E8%A8%98%E6%B3%95/","title":"Hugo で使える Markdown の記法"},{"content":"参考サイト Google先生\nもう、検索し過ぎて、どこのサイトを参考にしたのか分からなくなりました。\nサイト作成 $ hugo new site サイト名\nフォルダ構成（例） サイト作成をすると下記のようなフォルダ構成が作られる。\n（me）と書いたところは、必要になったら自分で作成するフォルダなので、サイト名直下のフォルダまでが自動生成かな。\nサイト名/ ├ archetypes/ 記事のテンプレートを入れるところ ├ content/ 記事を入れるところ │ └ post/ （me） │ └ blog/ （me） ├ layouts/ テンプレートとなる HTML を入れるところ │ └ _default （me） │ └ partials （me） ├ public/ 自動生成された公開ファイルが入るところ ├ static/ 素材関係を入れるところ │ └ css/ スタイルシートを入れるところ（me） │ └ images/ 画像ファイルを入れるところ（me） ├ theme/ テーマファイルを入れるところ │ └ aether/ aether というテーマのフォルダ（me） 記事作成 $ cd サイト名\nサイト名$ hugo new post/hoge.md\nnew のあとにフォルダを指定することで、content 以下に自動でフォルダが作成され、その中に記事用のファイルが作られる。\n記事は、テンプレートからタイトル、作成時間等は自動で代入されるが、記事本文や下書き状態から公開状態への切り替えなどは自身で行う。 Markdown 記法となるため、対応したエディタを使うと良い。\nちなみに k-kaz は VSCode で編集している。\nテーマインストール テーマサイトの中から、好きなタイプのものを選択する。 選択後、テーマの詳細が表示されるので、自分が使いたい機能が搭載されているか、事前にチェックする。（最悪、テーマを使わず、自力で機能搭載）\nそのページにはインストールの仕方も書いてあるが、サイト名/theme/ の中にきちんと入れること。\nテーマの適用 ルート（サイト名直下）にある config.toml を開き、theme = \u0026quot;\u0026quot; にインストールしたテーマ名を入れる。\n今回の場合は theme = \u0026quot;aether-kaz\u0026quot; となる。\nテーマ及びスタイルシート等の扱い テーマ内のファイルは直接修正をせず、ルートにある各フォルダにファイルをコピーして修正をする。\nそれらファイルはテーマ内のものよりも優先される。\nどこに置くかは、テーマ内を確認する。\nHTML → layout/_default/ HTML → layout/partials/ CSS → static/css/ IMAGE → static/images/ 記事の公開 記事内の修正 draft: true を draft: false に変更する。\n下書き → 公開 という感じ。\nGitHub Pages へアップ【GitHub】 サイト名$ hugo\nサイト名$ git add -A\nサイト名$ git commit -m \u0026quot;コミット内容\u0026quot;\nサイト名$ git push origin master\n一番上で、public の中身を生成し、その後 git のコマンドでリポジトリサーバーへアップをしている。毎回行うのは面倒なので、スクリプトを組んでおくと楽。\nまた、ここでは簡単に書いているが、現在のサイトについては下記のように公開用（public）とソース管理用で、2回に分けてアップしている。\nサイト名$ hugo\nサイト名$ cd public\nサイト名/public$ git add -A\nサイト名/public$ git commit -m \u0026quot;コミット内容\u0026quot;\nサイト名/public$ git push origin master\nサイト名/public$ cd ..\nサイト名$ git add -A\nサイト名$ git commit -m \u0026quot;コミット内容\u0026quot;\nサイト名$ git push origin master\nssh接続【GitHub】 ssh接続用に、公開鍵と秘密鍵を作成する。\n公開鍵の中身を GitHub に登録しておく。\n参考：GitHubでssh接続する手順公開鍵・秘密鍵の生成から\nhttps 接続から、ssh 接続に切り替える $ git remote -v で表示されたアドレスが https://github.com/ の場合は、git@github.com: に変えることで ssh 接続にできる。\n切替用コマンド $ git remote set-url origin git@github.com:hogehoge.git\n確認用コマンド $ ssh -T github\nこちらも随時更新していきます。\n","date":"2019-02-20T16:15:13+09:00","image":"https://k-kaz-git.github.io/images/writing-memo-note-pen_640.webp","permalink":"https://k-kaz-git.github.io/p/hugo-%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/","title":"Hugo の使い方"},{"content":"aether のカスタマイズをこちらにまとめます。 念の為、テーマを丸ごとコピーして、そちらを弄ることにします。 その際、以下の修正が必要です。\n/サイト名/themes/新しいテーマ名/theme.toml\nname = \u0026quot;新しいテーマ名\u0026quot;\n/サイト名/config.toml\ntheme = \u0026quot;新しいテーマ名\u0026quot;\n追記：注意事項 ［2019/02/20 12:50］ 素人が遊びながら行っているカスタマイズです。\n違っている部分など 多々 あるかもしれません。\nそのあたりは、十分にお気を付けください。\n追記：今更ですが・・・［2019/02/20 12:45］ わざわざテーマ内を弄らずに、root に用意されているフォルダ（static とか layout とか）にファイルを置いて弄れば良いような気がしてきた。\nそれが可能なら、テーマの丸ごとコピーも要らないしね。\nなんか、すごく無駄なことをしていたかもしれない。\nということで、このページも修正しました。\n標準機能内 ホームボタンの設定 個別記事を開いた時に、一番下に真っ白なスペースがあります。\nここは、ホーム（トップページ）に戻るためのボタンになっており、Home という白文字が入っています。実際は白同士で見えないんですけど。\nhomeimg に少し暗めの画像を指定すると、文字がハッキリして見やすいと思います。\n/サイト名/config.toml\nイメージデータの入れ方 テーマの readme にも書いてありますが、普通のコマンドで挿入すると、エリア内いっぱいに広がります。\n普通の入れ方\n![イメージタイトル](/images/hoge.webp) Google Analytics テーマが元々対応してくれているので、設定ファイルにトラッキングコードを記入するだけで、各ページに展開してくれます。\n/サイト名/config.toml\ngoogleAnalytics = \u0026#34;トラッキングコード\u0026#34; \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; の間に長いタグを入れる必要もありません。楽ちんだ。\n標準機能外 コメント用の外部サービスを外す テーマには、個別記事に disqus のサービスが組み込まれていますが、これも使いませんので外します。\n下記フォルダが無い場合は作成し、該当ファイルをテーマから持ってきましょう。\n/サイト名/layouts/_default/single.html\nテンプレートに外部リンクを仕込む 表示させる場所によって、編集するファイルは変わりますが、今回は最下部（フッター）に入れることにしました。普通に HTML を修正します。\nfooter.html は、\u0026lt;footer\u0026gt;\u0026lt;/footer\u0026gt; と、空っぽなので、その間にタグを入れます。\n/サイト名/layouts/partials/footer.html\nスタイルシートを適用する テーマ内のスタイルシートではなく、別途カスタマイズ用のファイルを用意します。\nまた、そのファイルを読み込むよう、HTML の修正をします。\nカスタマイズファイルを用意 /サイト名/static/css/hoge.css\ncss というフォルダも自分で作成し、その中にスタイルシート用のファイルを作ります。\nスタイルシートの読み込み /サイト名/layouts/partials/head.html\nスタイルシートの読み込み行が続いているので、一番下に /css/hoge.css を追加します。\n目次を追加する 手動で目次を作ることもできますが、後から構成が変更になると、追加修正が大変なことになりますので、自動的に目次を生成するようにします。\nこれは、Hugo に元々組み込まれている関数 {{.TableOfContents}} を使用することで実現可能です。\n公式ドキュメントでは、本文が 400文字以上の記事のみ目次を付ける というものが紹介されていました。\nしかし、私の英語力と、Hugo知識ではまだ乗り越えられない壁 のようです。\n結局、一番簡単な、下記方法で妥協しております。\n/サイト名/layouts/_default/single.html\nこうすることで、＜目次＞という文字列の下に、自動で目次を生成してくれます。\n条件としては、H2 以下の Hタグ が目次としての構成要素になるようです。\n但し、このやり方だと、400文字以上とか無視して、どのページにも出現します ので注意。\n更新日を追加する こちらのサイトは、日記的な 姉妹サイト（本家） とは違って、同じ記事を後から何度も加筆修正します。\nそうなると、投稿日だけではなく、最終更新日もあると嬉しい。\nさぁ、やってみましょう。\n更新日を追加する（個別記事） Hugo に用意されている関数 .Lastmod を利用します。\n下準備として、config.toml に関数を有効にするための記述を追加します。\n/サイト名/config.toml\nenableGitInfo = true ← これで有効化されます。\n続いて、更新日を出力したい場所に .Lastmod を入れます。\n/サイト名/layouts/_default/single.html\n\u0026lt;header\u0026gt; だけ抜き出しました。\n上が元のコードで、下が修正したコードです。\n[single.html 修正前] \u0026lt;header class=\u0026#34;post-header\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;post-title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;p class=\u0026#34;post-date\u0026#34;\u0026gt;Posted \u0026lt;time datetime=\u0026#34;{{ .Date.Format \u0026#34;2006-01-02\u0026#34; }}\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/header\u0026gt; [single.html 修正後] \u0026lt;header class=\u0026#34;post-header\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;post-title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;p class=\u0026#34;post-date\u0026#34;\u0026gt; Posted \u0026lt;time datetime=\u0026#34;{{ .Date.Format \u0026#34;2006-01-02\u0026#34; }}\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;2006-01-02\u0026#34; }}\u0026lt;/time\u0026gt; / Update {{ .Lastmod.Format \u0026#34;2006-01-02\u0026#34; }}\u0026lt;/p\u0026gt; \u0026lt;/header\u0026gt; .Lastmod だけだと、時間まで表示されて大げさなので、.Format \u0026quot;2006-01-02\u0026quot; で書式を設定しました。 ついでに初回投稿のほうも、同じ書式に変更しています。\n更新日を追加する（トップページ）［2019-02-25］ やり方は個別記事と同じで、編集するファイルが変わるだけです。\n/サイト名/layouts/_default/li.html\n※theme の中にあるのでコピーして持ってきます。\nついでに、ポストされた日のフォーマットも合わせておきます。\n\u0026lt;div\u0026gt; のすぐ下にある \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; の中を修正しています。\n[li.html 修正前] \u0026lt;div class=\u0026#34;card-subtext muted-text\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Posted \u0026lt;time datetime=\u0026#34;{{ .Date.Format \u0026#34;2006-01-02\u0026#34; }}\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt;\u0026lt;/p\u0026gt; {{ if (isset .Params \u0026#34;categories\u0026#34;) }}\u0026lt;p\u0026gt;{{ range .Params.categories }}#{{ . }} {{ end }}\u0026lt;/p\u0026gt;{{ end }} \u0026lt;/div\u0026gt; [li.html 修正後] \u0026lt;div class=\u0026#34;card-subtext muted-text\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Posted \u0026lt;time datetime=\u0026#34;{{ .Date.Format \u0026#34;2006-01-02\u0026#34; }}\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;2006-01-02\u0026#34; }}\u0026lt;/time\u0026gt; / Update {{ .Lastmod.Format \u0026#34;2006-01-02\u0026#34; }}\u0026lt;/p\u0026gt; {{ if (isset .Params \u0026#34;categories\u0026#34;) }}\u0026lt;p\u0026gt;{{ range .Params.categories }}#{{ . }} {{ end }}\u0026lt;/p\u0026gt;{{ end }} \u0026lt;/div\u0026gt; 更新日がうまく取得できずに悩む → 解決したっぽい［2019-02-25］ 手動でコミットしてプッシュするといけるけど、スクリプトでやるとダメっぽいぞ・・・。\nうーん、何が悪いんだ。\n［2019-02-28］\nサーバー側で反映されるのに、ちょびっとだけ時間がかかるだけだった疑惑発生！！\n更新日がうまく入らない プッシュするのにコマンドをいくつも入れるのが面倒なので、ネットで調べて下記のスクリプトを組んであります。\n#!/bin/bash echo -e \u0026#34;\\033[0;33mDeploying updates to GitHub...\\033[0m\u0026#34; # Build the project. hugo # Go to public folder cd public # Add changes to git. git add . # Commit changes. msg=\u0026#34;rebuilding site `date`\u0026#34; if [ $# -eq 1 ] then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Push source and build repos. git push origin master # Come back cd .. # Add changes to git. git add . # Commit changes. msg=\u0026#34;rebuilding site `date`\u0026#34; if [ $# -eq 1 ] then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Push source and build repos. git push origin master 手動で同じことをやっていくと反映するんですけど、これを実行したときってうまく反映されないような。\n気のせいかな。\n手動とスクリプトで何か違うのかな。\n更新日がうまく入らない（解決したっぽい） config.toml に追記することで解決したっぽい。\n[frontmatter] date = [\u0026#34;date\u0026#34;, \u0026#34;publishDate\u0026#34;, \u0026#34;lastmod\u0026#34;] lastmod = [\u0026#34;:git\u0026#34;, \u0026#34;lastmod\u0026#34;, \u0026#34;date\u0026#34;, \u0026#34;publishDate\u0026#34;] publishDate = [\u0026#34;publishDate\u0026#34;, \u0026#34;date\u0026#34;] expiryDate = [\u0026#34;expiryDate\u0026#34;] [frontmatter] というセクションを追加し、その下に日付的な設定を追加しました。\n参考にしたのは Configure Hugo です。\nもしかしたら、lastmod の行だけでもいいかもしれない。\nどの段階を最終更新と見るかという設定で、左から優先？みたい。\nデフォルトがこの設定なので、本来は書かなくても良さそうなんだけど・・・。\nまぁ、動いたから良しとする。\n更新日の件［2019-02-28］ サーバー側で反映されるのに時間がちょびっとかかるだけで、元々出来ていたような気がしてきた。\nそして、カテゴリーとタグを付け直したら、全ページの最終更新日が 2019-02-27 になってもうた。\n本文中の修正でなくても反映するのね。そりゃそうか。\nどうも気持ち悪いので、ファイルのタイムスタンプから更新日を取得するように変更しました。\n参考にしたのは公式のドキュメント\nConfigure Dates\n:fileModTime というのが、ファイルのタイムスタンプを見てくれるようなので、config.toml を下記のように変更です。\nlastmod = [\u0026quot;:fileModTime\u0026quot;, \u0026quot;:git\u0026quot;, \u0026quot;lastmod\u0026quot;, \u0026quot;date\u0026quot;, \u0026quot;publishDate\u0026quot;]\nlastmod のところで、一番左側に追加しました。\n尚、ファイルはすべて 2019-02-27 のタイムスタンプになっているので、別途アプリで弄っています。\n更新日の件［2019-03-04］ ファイルのタイムスタンプだと、git-pull で落としてきたときの日付が入っちゃって、やっぱり意図したものと違う。\n結局、元の設定に戻しました（苦笑）\nlastmod = [\u0026quot;:git\u0026quot;, \u0026quot;lastmod\u0026quot;, \u0026quot;date\u0026quot;, \u0026quot;publishDate\u0026quot;]\nフォントを指定する［2019-02-25］ やっぱり見た目は大事ですよね。\nということで、フォントを変えてみようと思います。\nWebフォントを使う フォントが汚いので、Webフォントで有名な Google Fonts を使ってみました。（姉妹サイト（本家） でも使っている）\nPageSpeed Insights のモバイルの点数が 15点落ちました ので、一瞬で戻しました（笑）\nパソコンのほうは相変わらず100点でしたけどね。モバイル、厳しいなぁ。\nWebフォントじゃなくてもきれいに表示することはできるのかしら。調べてみよう。\n尚、使うときは、\u0026lt;head\u0026gt; での読み込みと、css での指定が必要となります。\n以下のファイルを修正します。\n/サイト名/layouts/partials/head.html\n/サイト名/static/css/hoge.css\n尚、この後に書いている内容は、姉妹サイト（本家） で使っているものを若干修正したサンプルです。\n使うフォントによってタグの内容も変わりますので、Google Fonts で好きなフォントを選んで、それ用のタグを入手してください。\n［head.html に下記を貼り付ける］ \u0026lt;!-- webfontloader --\u0026gt; \u0026lt;script\u0026gt; window.WebFontConfig = { google: { families: [\u0026#39;Roboto:400,700\u0026#39;, \u0026#39;Noto+Sans+JP:400,700\u0026#39;] }, active: function() { sessionStorage.fonts = true; } }; (function() { var wf = document.createElement(\u0026#39;script\u0026#39;); wf.src = \u0026#39;https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js\u0026#39;; wf.type = \u0026#39;text/javascript\u0026#39;; wf.async = \u0026#39;true\u0026#39;; var s = document.getElementsByTagName(\u0026#39;script\u0026#39;)[0]; s.parentNode.insertBefore(wf, s); })(); \u0026lt;/script\u0026gt; \u0026lt;!-- webfontloader ここまで--\u0026gt; ［hoge.css に下記を貼り付ける］ body * {font-family: \u0026#39;Roboto\u0026#39;, \u0026#39;Noto Sans CJK JP\u0026#39;, \u0026#39;Noto Sans JP\u0026#39;, sans-serif !important;} スタイルシートのほうは、かなり乱暴な書き方をしていますけど、テストということで許してください（笑）\nローカルフォントを指定する とりあえず、最近は 游ゴシック体 が良いみたいなので、下記のように指定しました。\n游ゴシックに Medium が入っているのは、標準の太さだとかすれちゃう問題 が発生するからだそうです。\nfont-family: \u0026#34;游ゴシック Medium\u0026#34;, \u0026#34;Yu Gothic Medium\u0026#34;, \u0026#34;游ゴシック体\u0026#34;, \u0026#34;YuGothic\u0026#34;, \u0026#34;ヒラギノ角ゴ ProN W3\u0026#34;, \u0026#34;Hiragino Kaku Gothic ProN\u0026#34;, \u0026#34;メイリオ\u0026#34;, \u0026#34;Meiryo\u0026#34;, \u0026#34;verdana\u0026#34;, sans-serif; コード表示にサイズ制限を設ける ［2019-03-14］ こちらのサイトでは、よくコードの紹介をしています。（このページもそうですね）\nコードが長くなった場合に記事がえらく間延びしてしまうので、その対策をしたいと思います。\n尚、gist などを使えば自動的にサイズ調整はしてくれますので、ここでは素でコード記述をする場合の内容です。\nスタイルシートを修正する code { max-width: 100vw; max-height: 20vw; } 最大の幅、高さを設定しました。 スクロールバーを出すには overflow を入れてあげるのが正しいようですが、それをするとスクロールする必要のないコードまでスクロールバーが表示されて、格好悪かったです。OS やブラウザによるみたいですけど。\nで、それを抜いてあげたら、Hugo か、このテーマ内でうまいこと処理をしてくれましたので、めでたしめでたし。\nタグ問題を解決する［2019-02-28］ aether は、カテゴリーのみの運用で、タグの使用は意図されていません。\nタグを使いたい場合は、自力で頑張ることになります。\nタグを使えるようにする 2つのファイルを修正してあげます。\n設定ファイルの修正 設定ファイル config.toml に tag = \u0026quot;tags\u0026quot; を追加します。\nカテゴリーとまとめて書いておくと見やすいかと思います。\n[taxonomies] category = \u0026#34;categories\u0026#34; tag = \u0026#34;tags\u0026#34; 記事テンプレートの修正 もう1つ。\n記事データに tags: [\u0026quot;\u0026quot;] を追加しますが、毎回手動で入れるのは大変なので、テンプレートの方を直しておきます。\n投稿の仕方によって変わりますが、私は post というフォルダの中に記事を入れているので、下記のファイルを修正します。\nサイト名\\archetypes\\post.md\n私のファイルはこんな感じになっています。\n--- title: \u0026#34;{{ replace .TranslationBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} description: \u0026#34;\u0026#34; categories: [\u0026#34;\u0026#34;] tags: [\u0026#34;\u0026#34;] image: \u0026#34;\u0026#34; imageDescription: \u0026#34;\u0026#34; dropCap: false displayInMenu: false displayInList: true draft: true --- こうしておけば、hugo new post/hoge.md としたときに post に属する記事ということで、この post.md をテンプレートとして読み込んでくれ、ちょっとだけ楽になるのと、タグの付け忘れがなくなります。\n尚、記事のほうで tag が複数ある時は tags: [\u0026quot;aaa\u0026quot;,\u0026quot;bbb\u0026quot;,\u0026quot;ccc\u0026quot;] と書いてください。\nタグを表示する ここまでの作業で、記事にタグ付けが出来ています。\nただ、残念なことにそのタグを表示する術がありません。\nここから HTML のテンプレートを修正し、好きな場所にタグを表示させるようにします。\nトップページ サイト名\\layouts\\_default\\li.html\n一部分だけ抜き出しています。\n\u0026lt;article class=\u0026#34;card-body\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;card-title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h2\u0026gt; \u0026lt;p class=\u0026#34;card-text\u0026#34;\u0026gt;{{ if (isset .Params \u0026#34;description\u0026#34;) }}{{ index .Params \u0026#34;description\u0026#34; }}{{ else }}{{ .Summary }}{{ end }}\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;card-subtext muted-text\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Posted \u0026lt;time datetime=\u0026#34;{{ .Date.Format \u0026#34;2006-01-02\u0026#34; }}\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;2006-01-02\u0026#34; }}\u0026lt;/time\u0026gt; / Updated {{ .Lastmod.Format \u0026#34;2006-01-02\u0026#34; }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-subtext muted-text li-line\u0026#34;\u0026gt; {{ if (isset .Params \u0026#34;categories\u0026#34;) }}{{ range .Params.categories }}\u0026lt;span class=\u0026#34;box-gray\u0026#34;\u0026gt;{{ . }}\u0026lt;/span\u0026gt; {{ end }}{{ end }} {{ if (isset .Params \u0026#34;tags\u0026#34;) }} {{ range .Params.tags }}\u0026lt;span class=\u0026#34;box-gray\u0026#34;\u0026gt;# {{ . }}\u0026lt;/span\u0026gt; {{ end }}{{ end }} \u0026lt;/div\u0026gt; \u0026lt;/article\u0026gt; 先日、更新日を追加した修正のとき、カテゴリーも同じ \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; の中に入っていましたが、外側に出しています。\nもう1つ \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; を用意して、その中にカテゴリーと、今回追加のタグを入れています。\nよく分かっていませんが、categories を tags にしたら動くだろうと思ってやったら、その通り動きました。\n私が凄いのではなくて、感覚的にできちゃうという分かりやすい設計の Hugo が凄いのでしょう。\nついでに、カテゴリーに # が付いていましたが、タグのほうに持ってきました。\nあと、class を入れていますが、これは見た目の装飾だけで、動きには影響していません。\n個別記事 サイト名\\layouts\\_default\\single.html\n一部分だけ抜き出しています。\n\u0026lt;header class=\u0026#34;post-header\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;post-title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;p class=\u0026#34;post-date\u0026#34;\u0026gt; Posted \u0026lt;time datetime=\u0026#34;{{ .Date.Format \u0026#34;2006-01-02\u0026#34; }}\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;2006-01-02\u0026#34; }}\u0026lt;/time\u0026gt; / Update {{ .Lastmod.Format \u0026#34;2006-01-02\u0026#34; }}\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;card-subtext muted-text li-line\u0026#34;\u0026gt; {{ if (isset .Params \u0026#34;categories\u0026#34;) }}{{ range .Params.categories }} \u0026lt;a class=\u0026#34;cat\u0026#34; href=\u0026#34;/categories/{{ . }}\u0026#34;\u0026gt;{{ . }}\u0026lt;/a\u0026gt;{{ end }}{{ end }} {{ if (isset .Params \u0026#34;tags\u0026#34;) }}{{ range .Params.tags }} \u0026lt;a class=\u0026#34;tag\u0026#34; href=\u0026#34;/tags/{{ . }}\u0026#34;\u0026gt;# {{ . }}\u0026lt;/a\u0026gt; {{ end }}{{ end }} \u0026lt;/div\u0026gt; \u0026lt;/header\u0026gt; こちらもトップとほぼ同じですが、リンクの設定をしてあります。\n表示されたカテゴリーやタグをクリックすると、同一グループが一覧表示されるようになります。\nアドレスだけ気を付けてあげれば、一覧表示はテーマ側が自動でやってくれます。\nif文の中で、該当する文字列が見付かれば、リンクに展開するって感じかな。（知らんけど）\n複数見付かれば、その回数分、リンクを展開してくれます。\nカテゴリーのアドレス指定\n\u0026lt;a class=\u0026quot;cat\u0026quot; href=\u0026quot;/categories/{{ . }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt;\nタグのアドレス指定\n\u0026lt;a class=\u0026quot;tag\u0026quot; href=\u0026quot;/tags/{{ . }}\u0026quot;\u0026gt;# {{ . }}\u0026lt;/a\u0026gt;\nそれぞれ {{ . }} の中に、読み込まれたカテゴリーやタグが自動で入力されます。\nカテゴリーが homepage なら /categories/homepage と展開されます。\n私のサイトでは、このタグを上部と下部の2ヶ所に入れてみました。\n次の記事 個別記事の最下部に次の記事が表示されます。\nそこにも入れておきます。\nサイト名\\layouts\\_default\\li-next.html\n一部分だけ抜き出しています。\n\u0026lt;article class=\u0026#34;card-body\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;card-title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h2\u0026gt; \u0026lt;p class=\u0026#34;card-text\u0026#34;\u0026gt;{{ if (isset .Params \u0026#34;description\u0026#34;) }}{{ index .Params \u0026#34;description\u0026#34; }}{{ else }}{{ .Summary }}{{ end }}\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;card-subtext muted-text\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Posted \u0026lt;time datetime=\u0026#34;{{ .PublishDate.Format \u0026#34;2006-01-02\u0026#34; }}\u0026#34;\u0026gt;{{ .PublishDate.Format \u0026#34;2006-01-02\u0026#34; }}\u0026lt;/time\u0026gt; / Updated {{ .Lastmod.Format \u0026#34;2006-01-02\u0026#34; }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-subtext muted-text li-line\u0026#34;\u0026gt; {{ if (isset .Params \u0026#34;categories\u0026#34;) }}{{ range .Params.categories }}\u0026lt;span class=\u0026#34;box-gray\u0026#34;\u0026gt;{{ . }}\u0026lt;/span\u0026gt; {{ end }}{{ end }} {{ if (isset .Params \u0026#34;tags\u0026#34;) }}{{ range .Params.tags }}\u0026lt;span class=\u0026#34;box-gray\u0026#34;\u0026gt;# {{ . }}\u0026lt;/span\u0026gt; {{ end }}{{ end }} \u0026lt;/div\u0026gt; \u0026lt;/article\u0026gt; トップページと同じかな。\nメニューボタン 右上にある 三 みたいなボタンですけど、これを押すとカテゴリーを表示することができます。\nここはもう趣味なんですけど、この中にタグまで表示したい場合は下記を修正します。\nサイト名\\layouts\\partials\\nav-bar.html\n一部分だけ抜き出しています。\n\u0026lt;div class=\u0026#34;hamburger-menu\u0026#34;\u0026gt; \u0026lt;button onclick=\u0026#34;hamburgerMenuPressed.call(this)\u0026#34; aria-haspopup=\u0026#34;true\u0026#34; aria-expanded=\u0026#34;false\u0026#34; aria-controls=\u0026#34;menu\u0026#34; aria-label=\u0026#34;Menu\u0026#34;\u0026gt; \u0026lt;span\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;ul id=\u0026#34;menu\u0026#34; class=\u0026#34;hamburger-menu-overlay\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .Site.BaseURL }}\u0026#34; class=\u0026#34;hamburger-menu-overlay-link\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ range where .Site.Pages \u0026#34;Params.displayinmenu\u0026#34; true -}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34; class=\u0026#34;hamburger-menu-overlay-link\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end -}} \u0026lt;li class=\u0026#34;navi-menu\u0026#34;\u0026gt;- Categories -\u0026lt;/li\u0026gt; {{ range $key, $value := .Site.Taxonomies.categories -}} \u0026lt;li style=\u0026#34;font-size: 0.7em;\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;{{ (printf \u0026#34;%s%s\u0026#34; \u0026#34;categories/\u0026#34; ($key | urlize)) | absURL }}\u0026#34; class=\u0026#34;hamburger-menu-overlay-link\u0026#34;\u0026gt;{{ $key | humanize }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{- end }} \u0026lt;li class=\u0026#34;navi-menu\u0026#34;\u0026gt;- Tags -\u0026lt;/li\u0026gt; {{ range $key, $value := .Site.Taxonomies.tags -}} \u0026lt;li style=\u0026#34;font-size: 0.5em;\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;{{ (printf \u0026#34;%s%s\u0026#34; \u0026#34;tags/\u0026#34; ($key | urlize)) | absURL }}\u0026#34; class=\u0026#34;hamburger-menu-overlay-link\u0026#34;\u0026gt;{{ $key | humanize }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{- end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; すでにカテゴリーは記載済みですので、そこをコピペしてタグ用の行を追加しています。\ncategories = tags で置換してあげれば良いです。\nついでにカテゴリーとタグの区切りを入れたかったので、\u0026lt;li class=\u0026quot;navi-menu\u0026quot;\u0026gt;- Categories -\u0026lt;/li\u0026gt; と \u0026lt;li class=\u0026quot;navi-menu\u0026quot;\u0026gt;- Tags -\u0026lt;/li\u0026gt; を追加しました。\nclass は例のごとく見栄えだけです。\nメニューボタンの隣に並べることも考えたんですが、モバイルでレイアウトが崩れたので、メニューに入れてしまうという安易なやり方にしております。数が増えたらえらいことになるんだろうなと思いつつ（笑）\n最近は、ブラウザの検証機能を使って、パソコンとモバイルの両方で表示して確認するというクセがついてきました。（良いことです）\nカテゴリーとタグの表示調整 カテゴリーやタグの数が増えると表示が崩れます。\n（縦に伸びて文字全てを表示するようになるので、格好悪い）\nここもとりあえず @media screen で、幅の小さい端末の場合は、フォントサイズを小さくして誤魔化していますが、 数が増えてレイアウトが崩れるまえに改行表示するように、根本的な修正をしたいんですけどね。それはまた・・・。\nその後 インライン要素のために改行が出来ていなかったので、モバイルのときはブロック要素に変更するようスタイルシートを調整しました。これでウダウダと書いた上の問題は解消したと思います。\nまた何かあれば、随時追加します。\nMarkdown 記法も覚えなきゃね。\n","date":"2019-02-18T21:30:02+09:00","image":"https://k-kaz-git.github.io/images/pair-love_640.webp","permalink":"https://k-kaz-git.github.io/p/%E3%83%86%E3%83%BC%E3%83%9E-aether-%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA/","title":"テーマ aether のカスタマイズ"},{"content":"コメント欄を削除 使わないので、コメント欄は削除しました。\nテーマ内の single.html にタグにあった {{ template \u0026quot;_internal/disqus.html\u0026quot; . }} を、ばっさり削除。\nテーマはコピーしてから修正 念の為、テーマはコピーしてから、そのコピー先を修正しました。\nテーマ内の theme.toml を開いて、name を適当なものに変更。\nconfig.toml でテーマを選択しているので、そこのテーマ名も同じものにしました。\n","date":"2019-02-18T12:23:37+09:00","image":"https://k-kaz-git.github.io/images/speech-bubbles_640.webp","permalink":"https://k-kaz-git.github.io/p/%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E6%AC%84%E3%82%92%E5%89%8A%E9%99%A4/","title":"コメント欄を削除"},{"content":"次はカスタマイズだよね 安定して記事の投稿と GitHub Pages へのプッシュができるようになったので、次はカスタマイズかな。\n何から手を付けていこうかな。\nテーマ、スタイルシートあたりを弄ったら楽しいかな。\n少し弄った 記事の一番下にある白いスペースは何だろうと思っていたけど、ホームに戻るボタンだったのね。\nそこに Home って書かれていたんだけど、背景色と同じだったので分からなかった（笑）\n芝生と玩具の家の画像を当てはめてみました。\nこれで文字も見えるし、めでたしだね。\n","date":"2019-02-17T20:14:15+09:00","image":"https://k-kaz-git.github.io/images/people-custom_640.webp","permalink":"https://k-kaz-git.github.io/p/%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA/","title":"カスタマイズしてみたいな"},{"content":"安定した・・・気がする いくつかのエラーもネットで調べながら、地道に解決していって、GitHub の使い方も勉強し、ようやく安定した感じがする。\nカテゴリーとタグ こちらについても設定してみる。 このテーマの場合は、カテゴリーしか対応していないみたい。 デフォルトの項目に入っていなくて、付け足しても出てこない。\n使用テーマ（2019/02/17 5:44 現在） aether\n","date":"2019-02-17T04:50:58+09:00","image":"https://k-kaz-git.github.io/images/sky-stable-hugo_640.webp","permalink":"https://k-kaz-git.github.io/p/hugo-%E5%AE%89%E5%AE%9A%E3%81%97%E3%81%A6%E3%81%8D%E3%81%9F%E3%81%8B%E3%81%AA/","title":"Hugo 安定してきたかな"},{"content":"スクリプトによる更新 毎回手作業でいくつものコマンドを実行するのが大変なので、スクリプトを組んであります。（ネットでコピペしたんだけど）\nもしかしたら、これが怪しいかも。\n追記 結局、スクリプトは関係ありませんでした（笑）\n","date":"2019-02-16T19:41:01+09:00","image":"https://k-kaz-git.github.io/images/lighthouse-sea_640.webp","permalink":"https://k-kaz-git.github.io/p/hello4/","title":"Hello4"},{"content":"タイトルに日本語を入れてみる。 気になっているのはもう一つあるのだ。\nそれは自動的にアップするためのスクリプト。\n画像について このサイトで使っている画像は、すべて webp であります。\n","date":"2019-02-16T17:46:34+09:00","image":"https://k-kaz-git.github.io/images/tea-pot_640.webp","permalink":"https://k-kaz-git.github.io/p/%E3%82%BF%E3%82%A4%E3%83%88%E3%83%AB%E3%81%AB%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%82%92%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%BF%E3%82%8B/","title":"タイトルに日本語を入れてみる"},{"content":"よく分かりませんけど とりあえず、いくつか記事をアップしながら考えてみる。 思い当たるのが2つあるんだよな。\nまたダメになるかもしれないけど、後でちょっとやってみよう。\n","date":"2019-02-16T17:31:37+09:00","image":"https://k-kaz-git.github.io/images/tea-pot_640.webp","permalink":"https://k-kaz-git.github.io/p/oh/","title":"Oh!"},{"content":"テストです。 もう、1日中テストしていますよ。 そして、ついに、ついに、エラーが出なくなった模様。\nその理由が分からないのが気持ち悪い\n","date":"2019-02-16T16:52:50+09:00","image":"https://k-kaz-git.github.io/images/heart-shape-tree_640.webp","permalink":"https://k-kaz-git.github.io/p/hello/","title":"Hello"}]